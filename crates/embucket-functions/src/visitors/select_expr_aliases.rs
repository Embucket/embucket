use datafusion::logical_expr::sqlparser::ast::VisitMut;
use datafusion::sql::sqlparser::ast::{Ident, Query, SelectItem, SetExpr, Statement, VisitorMut};
use std::collections::HashSet;
use std::ops::ControlFlow;

/// A visitor that adds aliases to duplicated unnamed expressions in the `SELECT` clause.
///
/// # Purpose
/// This visitor ensures that repeated expressions in the `SELECT` list have distinct aliases,
/// which helps prevent ambiguity or redundancy in downstream processing (e.g., during SQL generation,
/// transformation, or execution in systems that expect column names to be unique).
///
/// # How It Works
/// - It traverses the `SELECT` clause of a query.
/// - For each unnamed expression (`SelectItem::UnnamedExpr`), it checks whether the expression
///   has already been seen (based on its string representation).
/// - If the same expression appears more than once without an alias, it assigns an autogenerated alias
///   (e.g., `expr_0`, `expr_1`, etc.) to the repeated occurrence.
/// - Named expressions (`SelectItem::ExprWithAlias`) are recorded and skipped to avoid double aliasing.
///
/// # Example
/// Input:
/// ```sql
/// SELECT to_date('2024-05-10'), to_date('2024-05-10')
/// ```
/// Output:
/// ```sql
/// SELECT to_date('2024-05-10'), to_date('2024-05-10') AS expr_0
/// ```
///
/// # Behavior Summary
/// - Adds aliases only to repeated **unnamed** expressions.
/// - Leaves already aliased expressions unchanged.
/// - Skips unique unnamed expressions (no alias needed).
/// - Does not modify subqueries or nested projections inside expressions.
/// - String comparison (`expr.to_string()`) is used to determine expression equality.
///
/// # Example Cases
/// - Repeated expression, no aliases → adds alias.
/// - Repeated expressions, some already aliased → skips already aliased, aliases only remaining.
/// - Expressions with different aliases → preserved as-is.
/// - Nested SELECTs → not deeply visited (each SELECT block handled independently).

#[derive(Debug, Default)]
pub struct AddAliasesToSelectExpressions {}

impl VisitorMut for AddAliasesToSelectExpressions {
    type Break = ();

    fn pre_visit_query(&mut self, query: &mut Query) -> ControlFlow<Self::Break> {
        if let SetExpr::Select(select) = &mut *query.body {
            let mut seen = HashSet::new();
            let mut counter = 0;

            for item in &mut select.projection {
                match item {
                    SelectItem::UnnamedExpr(expr) => {
                        let expr_str = expr.to_string();

                        if !seen.insert(expr_str.clone()) {
                            let alias = format!("expr_{counter}");
                            *item = SelectItem::ExprWithAlias {
                                expr: expr.clone(),
                                alias: Ident::new(alias),
                            };
                            counter += 1;
                        }
                    }
                    SelectItem::ExprWithAlias { alias, .. } => {
                        seen.insert(alias.value.clone());
                    }
                    _ => {}
                }
            }
        }
        ControlFlow::Continue(())
    }
}

pub fn visit(stmt: &mut Statement) {
    let _ = stmt.visit(&mut AddAliasesToSelectExpressions {});
}
