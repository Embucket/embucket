---
source: crates/runtime/src/tests/queries.rs
description: "\"SELECT *\n  FROM quarterly_sales\n    PIVOT(SUM(amount) FOR quarter IN (ANY ORDER BY quarter))\n  ORDER BY empid;\""
snapshot_kind: text
---
(
    Ok(
        Statement(
            Query(
                Query {
                    with: None,
                    body: Select(
                        Select {
                            select_token: TokenWithSpan {
                                token: Word(
                                    Word {
                                        value: "SELECT",
                                        quote_style: None,
                                        keyword: SELECT,
                                    },
                                ),
                                span: Span(Location(0,0)..Location(0,0)),
                            },
                            distinct: None,
                            top: None,
                            top_before_distinct: false,
                            projection: [
                                Wildcard(
                                    WildcardAdditionalOptions {
                                        wildcard_token: TokenWithSpan {
                                            token: Mul,
                                            span: Span(Location(0,0)..Location(0,0)),
                                        },
                                        opt_ilike: None,
                                        opt_exclude: None,
                                        opt_except: None,
                                        opt_replace: None,
                                        opt_rename: None,
                                    },
                                ),
                            ],
                            into: None,
                            from: [
                                TableWithJoins {
                                    relation: Pivot {
                                        table: Table {
                                            name: ObjectName(
                                                [
                                                    Ident {
                                                        value: "quarterly_sales",
                                                        quote_style: None,
                                                        span: Span(Location(0,0)..Location(0,0)),
                                                    },
                                                ],
                                            ),
                                            alias: None,
                                            args: None,
                                            with_hints: [],
                                            version: None,
                                            with_ordinality: false,
                                            partitions: [],
                                            json_path: None,
                                        },
                                        aggregate_functions: [
                                            ExprWithAlias {
                                                expr: Function(
                                                    Function {
                                                        name: ObjectName(
                                                            [
                                                                Ident {
                                                                    value: "SUM",
                                                                    quote_style: None,
                                                                    span: Span(Location(0,0)..Location(0,0)),
                                                                },
                                                            ],
                                                        ),
                                                        uses_odbc_syntax: false,
                                                        parameters: None,
                                                        args: List(
                                                            FunctionArgumentList {
                                                                duplicate_treatment: None,
                                                                args: [
                                                                    Unnamed(
                                                                        Expr(
                                                                            Identifier(
                                                                                Ident {
                                                                                    value: "amount",
                                                                                    quote_style: None,
                                                                                    span: Span(Location(0,0)..Location(0,0)),
                                                                                },
                                                                            ),
                                                                        ),
                                                                    ),
                                                                ],
                                                                clauses: [],
                                                            },
                                                        ),
                                                        filter: None,
                                                        null_treatment: None,
                                                        over: None,
                                                        within_group: [],
                                                    },
                                                ),
                                                alias: None,
                                            },
                                        ],
                                        value_column: [
                                            Ident {
                                                value: "quarter",
                                                quote_style: None,
                                                span: Span(Location(0,0)..Location(0,0)),
                                            },
                                        ],
                                        value_source: Any(
                                            [
                                                OrderByExpr {
                                                    expr: Identifier(
                                                        Ident {
                                                            value: "quarter",
                                                            quote_style: None,
                                                            span: Span(Location(0,0)..Location(0,0)),
                                                        },
                                                    ),
                                                    asc: None,
                                                    nulls_first: None,
                                                    with_fill: None,
                                                },
                                            ],
                                        ),
                                        default_on_null: None,
                                        alias: None,
                                    },
                                    joins: [],
                                },
                            ],
                            lateral_views: [],
                            prewhere: None,
                            selection: None,
                            group_by: Expressions(
                                [],
                                [],
                            ),
                            cluster_by: [],
                            distribute_by: [],
                            sort_by: [],
                            having: None,
                            named_window: [],
                            qualify: None,
                            window_before_qualify: false,
                            value_table_mode: None,
                            connect_by: None,
                        },
                    ),
                    order_by: Some(
                        OrderBy {
                            exprs: [
                                OrderByExpr {
                                    expr: Identifier(
                                        Ident {
                                            value: "empid",
                                            quote_style: None,
                                            span: Span(Location(0,0)..Location(0,0)),
                                        },
                                    ),
                                    asc: None,
                                    nulls_first: None,
                                    with_fill: None,
                                },
                            ],
                            interpolate: None,
                        },
                    ),
                    limit: None,
                    limit_by: [],
                    offset: None,
                    fetch: None,
                    locks: [],
                    for_clause: None,
                    settings: None,
                    format_clause: None,
                },
            ),
        ),
    ),
    Err(
        NotImplemented(
            "Unsupported ast node Pivot { table: Table { name: ObjectName([Ident { value: \"quarterly_sales\", quote_style: None, span: Span(Location(0,0)..Location(0,0)) }]), alias: None, args: None, with_hints: [], version: None, with_ordinality: false, partitions: [], json_path: None }, aggregate_functions: [ExprWithAlias { expr: Function(Function { name: ObjectName([Ident { value: \"SUM\", quote_style: None, span: Span(Location(0,0)..Location(0,0)) }]), uses_odbc_syntax: false, parameters: None, args: List(FunctionArgumentList { duplicate_treatment: None, args: [Unnamed(Expr(Identifier(Ident { value: \"amount\", quote_style: None, span: Span(Location(0,0)..Location(0,0)) })))], clauses: [] }), filter: None, null_treatment: None, over: None, within_group: [] }), alias: None }], value_column: [Ident { value: \"quarter\", quote_style: None, span: Span(Location(0,0)..Location(0,0)) }], value_source: Any([OrderByExpr { expr: Identifier(Ident { value: \"quarter\", quote_style: None, span: Span(Location(0,0)..Location(0,0)) }), asc: None, nulls_first: None, with_fill: None }]), default_on_null: None, alias: None } in create_relation",
        ),
    ),
    Err(
        Execution(
            "Failed to create logical plan",
        ),
    ),
)
