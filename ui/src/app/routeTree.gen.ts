/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as QueryHistoryImport } from './routes/query-history';
import { Route as HomeImport } from './routes/home';
import { Route as DataImport } from './routes/data';
import { Route as IndexImport } from './routes/index';
import { Route as ProfileSettingsIndexImport } from './routes/profile-settings/index';
import { Route as SqlEditorWorksheetIdIndexImport } from './routes/sql-editor/$worksheetId.index';

// Create/Update Routes

const QueryHistoryRoute = QueryHistoryImport.update({
  id: '/query-history',
  path: '/query-history',
  getParentRoute: () => rootRoute,
} as any);

const HomeRoute = HomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRoute,
} as any);

const DataRoute = DataImport.update({
  id: '/data',
  path: '/data',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const ProfileSettingsIndexRoute = ProfileSettingsIndexImport.update({
  id: '/profile-settings/',
  path: '/profile-settings/',
  getParentRoute: () => rootRoute,
} as any);

const SqlEditorWorksheetIdIndexRoute = SqlEditorWorksheetIdIndexImport.update({
  id: '/sql-editor/$worksheetId/',
  path: '/sql-editor/$worksheetId/',
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/data': {
      id: '/data';
      path: '/data';
      fullPath: '/data';
      preLoaderRoute: typeof DataImport;
      parentRoute: typeof rootRoute;
    };
    '/home': {
      id: '/home';
      path: '/home';
      fullPath: '/home';
      preLoaderRoute: typeof HomeImport;
      parentRoute: typeof rootRoute;
    };
    '/query-history': {
      id: '/query-history';
      path: '/query-history';
      fullPath: '/query-history';
      preLoaderRoute: typeof QueryHistoryImport;
      parentRoute: typeof rootRoute;
    };
    '/profile-settings/': {
      id: '/profile-settings/';
      path: '/profile-settings';
      fullPath: '/profile-settings';
      preLoaderRoute: typeof ProfileSettingsIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/sql-editor/$worksheetId/': {
      id: '/sql-editor/$worksheetId/';
      path: '/sql-editor/$worksheetId';
      fullPath: '/sql-editor/$worksheetId';
      preLoaderRoute: typeof SqlEditorWorksheetIdIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/data': typeof DataRoute;
  '/home': typeof HomeRoute;
  '/query-history': typeof QueryHistoryRoute;
  '/profile-settings': typeof ProfileSettingsIndexRoute;
  '/sql-editor/$worksheetId': typeof SqlEditorWorksheetIdIndexRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/data': typeof DataRoute;
  '/home': typeof HomeRoute;
  '/query-history': typeof QueryHistoryRoute;
  '/profile-settings': typeof ProfileSettingsIndexRoute;
  '/sql-editor/$worksheetId': typeof SqlEditorWorksheetIdIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/data': typeof DataRoute;
  '/home': typeof HomeRoute;
  '/query-history': typeof QueryHistoryRoute;
  '/profile-settings/': typeof ProfileSettingsIndexRoute;
  '/sql-editor/$worksheetId/': typeof SqlEditorWorksheetIdIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/data'
    | '/home'
    | '/query-history'
    | '/profile-settings'
    | '/sql-editor/$worksheetId';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/data'
    | '/home'
    | '/query-history'
    | '/profile-settings'
    | '/sql-editor/$worksheetId';
  id:
    | '__root__'
    | '/'
    | '/data'
    | '/home'
    | '/query-history'
    | '/profile-settings/'
    | '/sql-editor/$worksheetId/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  DataRoute: typeof DataRoute;
  HomeRoute: typeof HomeRoute;
  QueryHistoryRoute: typeof QueryHistoryRoute;
  ProfileSettingsIndexRoute: typeof ProfileSettingsIndexRoute;
  SqlEditorWorksheetIdIndexRoute: typeof SqlEditorWorksheetIdIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DataRoute: DataRoute,
  HomeRoute: HomeRoute,
  QueryHistoryRoute: QueryHistoryRoute,
  ProfileSettingsIndexRoute: ProfileSettingsIndexRoute,
  SqlEditorWorksheetIdIndexRoute: SqlEditorWorksheetIdIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/data",
        "/home",
        "/query-history",
        "/profile-settings/",
        "/sql-editor/$worksheetId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/data": {
      "filePath": "data.tsx"
    },
    "/home": {
      "filePath": "home.tsx"
    },
    "/query-history": {
      "filePath": "query-history.tsx"
    },
    "/profile-settings/": {
      "filePath": "profile-settings/index.tsx"
    },
    "/sql-editor/$worksheetId/": {
      "filePath": "sql-editor/$worksheetId.index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
