/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * UI Router API
 * Defines the specification for the UI Catalog API
 * OpenAPI spec version: 1.0.2
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { useAxiosMutator } from '../lib/axiosMutator';
import type { ErrorType } from '../lib/axiosMutator';
import type {
  DatabaseCreatePayload,
  DatabaseCreateResponse,
  DatabaseResponse,
  DatabasesResponse,
  ErrorResponse,
  GetDatabasesParams,
} from './models';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getDatabases = (
  params?: GetDatabasesParams,
  options?: SecondParameter<typeof useAxiosMutator>,
  signal?: AbortSignal,
) => {
  return useAxiosMutator<DatabasesResponse>(
    { url: `/ui/databases`, method: 'GET', params, signal },
    options,
  );
};

export const getGetDatabasesQueryKey = (params?: GetDatabasesParams) => {
  return [`/ui/databases`, ...(params ? [params] : [])] as const;
};

export const getGetDatabasesInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getDatabases>>>,
  TError = ErrorType<ErrorResponse>,
>(
  params?: GetDatabasesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDatabases>>, TError, TData>
    >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDatabasesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDatabases>>> = ({ signal }) =>
    getDatabases(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getDatabases>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDatabasesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getDatabases>>>;
export type GetDatabasesInfiniteQueryError = ErrorType<ErrorResponse>;

export function useGetDatabasesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getDatabases>>>,
  TError = ErrorType<ErrorResponse>,
>(
  params: undefined | GetDatabasesParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDatabases>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDatabases>>,
          TError,
          Awaited<ReturnType<typeof getDatabases>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDatabasesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getDatabases>>>,
  TError = ErrorType<ErrorResponse>,
>(
  params?: GetDatabasesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDatabases>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDatabases>>,
          TError,
          Awaited<ReturnType<typeof getDatabases>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDatabasesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getDatabases>>>,
  TError = ErrorType<ErrorResponse>,
>(
  params?: GetDatabasesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDatabases>>, TError, TData>
    >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetDatabasesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getDatabases>>>,
  TError = ErrorType<ErrorResponse>,
>(
  params?: GetDatabasesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDatabases>>, TError, TData>
    >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetDatabasesInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetDatabasesQueryOptions = <
  TData = Awaited<ReturnType<typeof getDatabases>>,
  TError = ErrorType<ErrorResponse>,
>(
  params?: GetDatabasesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDatabases>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDatabasesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDatabases>>> = ({ signal }) =>
    getDatabases(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDatabases>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDatabasesQueryResult = NonNullable<Awaited<ReturnType<typeof getDatabases>>>;
export type GetDatabasesQueryError = ErrorType<ErrorResponse>;

export function useGetDatabases<
  TData = Awaited<ReturnType<typeof getDatabases>>,
  TError = ErrorType<ErrorResponse>,
>(
  params: undefined | GetDatabasesParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDatabases>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDatabases>>,
          TError,
          Awaited<ReturnType<typeof getDatabases>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDatabases<
  TData = Awaited<ReturnType<typeof getDatabases>>,
  TError = ErrorType<ErrorResponse>,
>(
  params?: GetDatabasesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDatabases>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDatabases>>,
          TError,
          Awaited<ReturnType<typeof getDatabases>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDatabases<
  TData = Awaited<ReturnType<typeof getDatabases>>,
  TError = ErrorType<ErrorResponse>,
>(
  params?: GetDatabasesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDatabases>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetDatabases<
  TData = Awaited<ReturnType<typeof getDatabases>>,
  TError = ErrorType<ErrorResponse>,
>(
  params?: GetDatabasesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDatabases>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetDatabasesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createDatabase = (
  databaseCreatePayload: DatabaseCreatePayload,
  options?: SecondParameter<typeof useAxiosMutator>,
  signal?: AbortSignal,
) => {
  return useAxiosMutator<DatabaseCreateResponse>(
    {
      url: `/ui/databases`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: databaseCreatePayload,
      signal,
    },
    options,
  );
};

export const getCreateDatabaseMutationOptions = <
  TError = ErrorType<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createDatabase>>,
    TError,
    { data: DatabaseCreatePayload },
    TContext
  >;
  request?: SecondParameter<typeof useAxiosMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createDatabase>>,
  TError,
  { data: DatabaseCreatePayload },
  TContext
> => {
  const mutationKey = ['createDatabase'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createDatabase>>,
    { data: DatabaseCreatePayload }
  > = (props) => {
    const { data } = props ?? {};

    return createDatabase(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateDatabaseMutationResult = NonNullable<Awaited<ReturnType<typeof createDatabase>>>;
export type CreateDatabaseMutationBody = DatabaseCreatePayload;
export type CreateDatabaseMutationError = ErrorType<ErrorResponse>;

export const useCreateDatabase = <TError = ErrorType<ErrorResponse>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createDatabase>>,
      TError,
      { data: DatabaseCreatePayload },
      TContext
    >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createDatabase>>,
  TError,
  { data: DatabaseCreatePayload },
  TContext
> => {
  const mutationOptions = getCreateDatabaseMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getDatabase = (
  databaseName: string,
  options?: SecondParameter<typeof useAxiosMutator>,
  signal?: AbortSignal,
) => {
  return useAxiosMutator<DatabaseResponse>(
    { url: `/ui/databases/${databaseName}`, method: 'GET', signal },
    options,
  );
};

export const getGetDatabaseQueryKey = (databaseName: string) => {
  return [`/ui/databases/${databaseName}`] as const;
};

export const getGetDatabaseInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getDatabase>>>,
  TError = ErrorType<ErrorResponse>,
>(
  databaseName: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDatabase>>, TError, TData>
    >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDatabaseQueryKey(databaseName);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDatabase>>> = ({ signal }) =>
    getDatabase(databaseName, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!databaseName, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getDatabase>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDatabaseInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getDatabase>>>;
export type GetDatabaseInfiniteQueryError = ErrorType<ErrorResponse>;

export function useGetDatabaseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getDatabase>>>,
  TError = ErrorType<ErrorResponse>,
>(
  databaseName: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDatabase>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDatabase>>,
          TError,
          Awaited<ReturnType<typeof getDatabase>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDatabaseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getDatabase>>>,
  TError = ErrorType<ErrorResponse>,
>(
  databaseName: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDatabase>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDatabase>>,
          TError,
          Awaited<ReturnType<typeof getDatabase>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDatabaseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getDatabase>>>,
  TError = ErrorType<ErrorResponse>,
>(
  databaseName: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDatabase>>, TError, TData>
    >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetDatabaseInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getDatabase>>>,
  TError = ErrorType<ErrorResponse>,
>(
  databaseName: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDatabase>>, TError, TData>
    >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetDatabaseInfiniteQueryOptions(databaseName, options);

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetDatabaseQueryOptions = <
  TData = Awaited<ReturnType<typeof getDatabase>>,
  TError = ErrorType<ErrorResponse>,
>(
  databaseName: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDatabase>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDatabaseQueryKey(databaseName);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDatabase>>> = ({ signal }) =>
    getDatabase(databaseName, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!databaseName, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDatabase>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetDatabaseQueryResult = NonNullable<Awaited<ReturnType<typeof getDatabase>>>;
export type GetDatabaseQueryError = ErrorType<ErrorResponse>;

export function useGetDatabase<
  TData = Awaited<ReturnType<typeof getDatabase>>,
  TError = ErrorType<ErrorResponse>,
>(
  databaseName: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDatabase>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDatabase>>,
          TError,
          Awaited<ReturnType<typeof getDatabase>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDatabase<
  TData = Awaited<ReturnType<typeof getDatabase>>,
  TError = ErrorType<ErrorResponse>,
>(
  databaseName: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDatabase>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDatabase>>,
          TError,
          Awaited<ReturnType<typeof getDatabase>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetDatabase<
  TData = Awaited<ReturnType<typeof getDatabase>>,
  TError = ErrorType<ErrorResponse>,
>(
  databaseName: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDatabase>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetDatabase<
  TData = Awaited<ReturnType<typeof getDatabase>>,
  TError = ErrorType<ErrorResponse>,
>(
  databaseName: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getDatabase>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetDatabaseQueryOptions(databaseName, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteDatabase = (
  databaseName: string,
  options?: SecondParameter<typeof useAxiosMutator>,
) => {
  return useAxiosMutator<void>({ url: `/ui/databases/${databaseName}`, method: 'DELETE' }, options);
};

export const getDeleteDatabaseMutationOptions = <
  TError = ErrorType<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDatabase>>,
    TError,
    { databaseName: string },
    TContext
  >;
  request?: SecondParameter<typeof useAxiosMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteDatabase>>,
  TError,
  { databaseName: string },
  TContext
> => {
  const mutationKey = ['deleteDatabase'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteDatabase>>,
    { databaseName: string }
  > = (props) => {
    const { databaseName } = props ?? {};

    return deleteDatabase(databaseName, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteDatabaseMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDatabase>>>;

export type DeleteDatabaseMutationError = ErrorType<ErrorResponse>;

export const useDeleteDatabase = <TError = ErrorType<ErrorResponse>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteDatabase>>,
      TError,
      { databaseName: string },
      TContext
    >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteDatabase>>,
  TError,
  { databaseName: string },
  TContext
> => {
  const mutationOptions = getDeleteDatabaseMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
