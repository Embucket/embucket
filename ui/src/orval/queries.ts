/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * UI Router API
 * Defines the specification for the UI Catalog API
 * OpenAPI spec version: 1.0.2
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { useAxiosMutator } from '../lib/axiosMutator';
import type { ErrorType } from '../lib/axiosMutator';
import type {
  ErrorResponse,
  GetQueriesParams,
  I64,
  QueriesResponse,
  QueryCreatePayload,
  QueryRecord,
} from './models';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getQueries = (
  params?: GetQueriesParams,
  options?: SecondParameter<typeof useAxiosMutator>,
  signal?: AbortSignal,
) => {
  return useAxiosMutator<QueriesResponse>(
    { url: `/ui/queries`, method: 'GET', params, signal },
    options,
  );
};

export const getGetQueriesQueryKey = (params?: GetQueriesParams) => {
  return [`/ui/queries`, ...(params ? [params] : [])] as const;
};

export const getGetQueriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getQueries>>,
  TError = ErrorType<ErrorResponse>,
>(
  params?: GetQueriesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getQueries>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetQueriesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getQueries>>> = ({ signal }) =>
    getQueries(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getQueries>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetQueriesQueryResult = NonNullable<Awaited<ReturnType<typeof getQueries>>>;
export type GetQueriesQueryError = ErrorType<ErrorResponse>;

export function useGetQueries<
  TData = Awaited<ReturnType<typeof getQueries>>,
  TError = ErrorType<ErrorResponse>,
>(
  params: undefined | GetQueriesParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getQueries>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getQueries>>,
          TError,
          Awaited<ReturnType<typeof getQueries>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetQueries<
  TData = Awaited<ReturnType<typeof getQueries>>,
  TError = ErrorType<ErrorResponse>,
>(
  params?: GetQueriesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getQueries>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getQueries>>,
          TError,
          Awaited<ReturnType<typeof getQueries>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetQueries<
  TData = Awaited<ReturnType<typeof getQueries>>,
  TError = ErrorType<ErrorResponse>,
>(
  params?: GetQueriesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getQueries>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetQueries<
  TData = Awaited<ReturnType<typeof getQueries>>,
  TError = ErrorType<ErrorResponse>,
>(
  params?: GetQueriesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getQueries>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetQueriesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createQuery = (
  queryCreatePayload: QueryCreatePayload,
  options?: SecondParameter<typeof useAxiosMutator>,
  signal?: AbortSignal,
) => {
  return useAxiosMutator<QueryRecord>(
    {
      url: `/ui/queries`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: queryCreatePayload,
      signal,
    },
    options,
  );
};

export const getCreateQueryMutationOptions = <
  TError = ErrorType<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createQuery>>,
    TError,
    { data: QueryCreatePayload },
    TContext
  >;
  request?: SecondParameter<typeof useAxiosMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createQuery>>,
  TError,
  { data: QueryCreatePayload },
  TContext
> => {
  const mutationKey = ['createQuery'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createQuery>>,
    { data: QueryCreatePayload }
  > = (props) => {
    const { data } = props ?? {};

    return createQuery(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateQueryMutationResult = NonNullable<Awaited<ReturnType<typeof createQuery>>>;
export type CreateQueryMutationBody = QueryCreatePayload;
export type CreateQueryMutationError = ErrorType<ErrorResponse>;

export const useCreateQuery = <TError = ErrorType<ErrorResponse>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createQuery>>,
      TError,
      { data: QueryCreatePayload },
      TContext
    >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createQuery>>,
  TError,
  { data: QueryCreatePayload },
  TContext
> => {
  const mutationOptions = getCreateQueryMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getQuery = (
  queryRecordId: I64,
  options?: SecondParameter<typeof useAxiosMutator>,
  signal?: AbortSignal,
) => {
  return useAxiosMutator<QueryRecord>(
    { url: `/ui/queries/${queryRecordId}`, method: 'GET', signal },
    options,
  );
};

export const getGetQueryQueryKey = (queryRecordId: I64) => {
  return [`/ui/queries/${queryRecordId}`] as const;
};

export const getGetQueryQueryOptions = <
  TData = Awaited<ReturnType<typeof getQuery>>,
  TError = ErrorType<ErrorResponse>,
>(
  queryRecordId: I64,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getQuery>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetQueryQueryKey(queryRecordId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getQuery>>> = ({ signal }) =>
    getQuery(queryRecordId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!queryRecordId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getQuery>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetQueryQueryResult = NonNullable<Awaited<ReturnType<typeof getQuery>>>;
export type GetQueryQueryError = ErrorType<ErrorResponse>;

export function useGetQuery<
  TData = Awaited<ReturnType<typeof getQuery>>,
  TError = ErrorType<ErrorResponse>,
>(
  queryRecordId: I64,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getQuery>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getQuery>>,
          TError,
          Awaited<ReturnType<typeof getQuery>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetQuery<
  TData = Awaited<ReturnType<typeof getQuery>>,
  TError = ErrorType<ErrorResponse>,
>(
  queryRecordId: I64,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getQuery>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getQuery>>,
          TError,
          Awaited<ReturnType<typeof getQuery>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetQuery<
  TData = Awaited<ReturnType<typeof getQuery>>,
  TError = ErrorType<ErrorResponse>,
>(
  queryRecordId: I64,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getQuery>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetQuery<
  TData = Awaited<ReturnType<typeof getQuery>>,
  TError = ErrorType<ErrorResponse>,
>(
  queryRecordId: I64,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getQuery>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetQueryQueryOptions(queryRecordId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
