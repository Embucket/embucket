/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * UI Router API
 * Defines the specification for the UI Catalog API
 * OpenAPI spec version: 1.0.2
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { useAxiosMutator } from '../lib/axiosMutator';
import type { ErrorType } from '../lib/axiosMutator';
import type {
  ErrorResponse,
  GetSchemasParams,
  Schema,
  SchemaCreatePayload,
  SchemasResponse,
} from './models';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getSchemas = (
  databaseName: string,
  params?: GetSchemasParams,
  options?: SecondParameter<typeof useAxiosMutator>,
  signal?: AbortSignal,
) => {
  return useAxiosMutator<SchemasResponse>(
    { url: `/ui/databases/${databaseName}/schemas`, method: 'GET', params, signal },
    options,
  );
};

export const getGetSchemasQueryKey = (databaseName: string, params?: GetSchemasParams) => {
  return [`/ui/databases/${databaseName}/schemas`, ...(params ? [params] : [])] as const;
};

export const getGetSchemasInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getSchemas>>>,
  TError = ErrorType<ErrorResponse>,
>(
  databaseName: string,
  params?: GetSchemasParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSchemas>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSchemasQueryKey(databaseName, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSchemas>>> = ({ signal }) =>
    getSchemas(databaseName, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!databaseName, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getSchemas>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSchemasInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getSchemas>>>;
export type GetSchemasInfiniteQueryError = ErrorType<ErrorResponse>;

export function useGetSchemasInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getSchemas>>>,
  TError = ErrorType<ErrorResponse>,
>(
  databaseName: string,
  params: undefined | GetSchemasParams,
  options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSchemas>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSchemas>>,
          TError,
          Awaited<ReturnType<typeof getSchemas>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetSchemasInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getSchemas>>>,
  TError = ErrorType<ErrorResponse>,
>(
  databaseName: string,
  params?: GetSchemasParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSchemas>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSchemas>>,
          TError,
          Awaited<ReturnType<typeof getSchemas>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetSchemasInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getSchemas>>>,
  TError = ErrorType<ErrorResponse>,
>(
  databaseName: string,
  params?: GetSchemasParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSchemas>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetSchemasInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getSchemas>>>,
  TError = ErrorType<ErrorResponse>,
>(
  databaseName: string,
  params?: GetSchemasParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSchemas>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetSchemasInfiniteQueryOptions(databaseName, params, options);

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetSchemasQueryOptions = <
  TData = Awaited<ReturnType<typeof getSchemas>>,
  TError = ErrorType<ErrorResponse>,
>(
  databaseName: string,
  params?: GetSchemasParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchemas>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSchemasQueryKey(databaseName, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSchemas>>> = ({ signal }) =>
    getSchemas(databaseName, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!databaseName, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSchemas>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSchemasQueryResult = NonNullable<Awaited<ReturnType<typeof getSchemas>>>;
export type GetSchemasQueryError = ErrorType<ErrorResponse>;

export function useGetSchemas<
  TData = Awaited<ReturnType<typeof getSchemas>>,
  TError = ErrorType<ErrorResponse>,
>(
  databaseName: string,
  params: undefined | GetSchemasParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchemas>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSchemas>>,
          TError,
          Awaited<ReturnType<typeof getSchemas>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetSchemas<
  TData = Awaited<ReturnType<typeof getSchemas>>,
  TError = ErrorType<ErrorResponse>,
>(
  databaseName: string,
  params?: GetSchemasParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchemas>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSchemas>>,
          TError,
          Awaited<ReturnType<typeof getSchemas>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetSchemas<
  TData = Awaited<ReturnType<typeof getSchemas>>,
  TError = ErrorType<ErrorResponse>,
>(
  databaseName: string,
  params?: GetSchemasParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchemas>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetSchemas<
  TData = Awaited<ReturnType<typeof getSchemas>>,
  TError = ErrorType<ErrorResponse>,
>(
  databaseName: string,
  params?: GetSchemasParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSchemas>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetSchemasQueryOptions(databaseName, params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createSchema = (
  databaseName: string,
  schemaCreatePayload: SchemaCreatePayload,
  options?: SecondParameter<typeof useAxiosMutator>,
  signal?: AbortSignal,
) => {
  return useAxiosMutator<Schema>(
    {
      url: `/ui/databases/${databaseName}/schemas`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: schemaCreatePayload,
      signal,
    },
    options,
  );
};

export const getCreateSchemaMutationOptions = <
  TError = ErrorType<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createSchema>>,
    TError,
    { databaseName: string; data: SchemaCreatePayload },
    TContext
  >;
  request?: SecondParameter<typeof useAxiosMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createSchema>>,
  TError,
  { databaseName: string; data: SchemaCreatePayload },
  TContext
> => {
  const mutationKey = ['createSchema'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createSchema>>,
    { databaseName: string; data: SchemaCreatePayload }
  > = (props) => {
    const { databaseName, data } = props ?? {};

    return createSchema(databaseName, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateSchemaMutationResult = NonNullable<Awaited<ReturnType<typeof createSchema>>>;
export type CreateSchemaMutationBody = SchemaCreatePayload;
export type CreateSchemaMutationError = ErrorType<ErrorResponse>;

export const useCreateSchema = <TError = ErrorType<ErrorResponse>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createSchema>>,
      TError,
      { databaseName: string; data: SchemaCreatePayload },
      TContext
    >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createSchema>>,
  TError,
  { databaseName: string; data: SchemaCreatePayload },
  TContext
> => {
  const mutationOptions = getCreateSchemaMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteSchema = (
  databaseName: string,
  schemaName: string,
  options?: SecondParameter<typeof useAxiosMutator>,
) => {
  return useAxiosMutator<void>(
    { url: `/ui/databases/${databaseName}/schemas/${schemaName}`, method: 'DELETE' },
    options,
  );
};

export const getDeleteSchemaMutationOptions = <
  TError = ErrorType<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteSchema>>,
    TError,
    { databaseName: string; schemaName: string },
    TContext
  >;
  request?: SecondParameter<typeof useAxiosMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteSchema>>,
  TError,
  { databaseName: string; schemaName: string },
  TContext
> => {
  const mutationKey = ['deleteSchema'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteSchema>>,
    { databaseName: string; schemaName: string }
  > = (props) => {
    const { databaseName, schemaName } = props ?? {};

    return deleteSchema(databaseName, schemaName, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteSchemaMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSchema>>>;

export type DeleteSchemaMutationError = ErrorType<ErrorResponse>;

export const useDeleteSchema = <TError = ErrorType<ErrorResponse>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteSchema>>,
      TError,
      { databaseName: string; schemaName: string },
      TContext
    >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteSchema>>,
  TError,
  { databaseName: string; schemaName: string },
  TContext
> => {
  const mutationOptions = getDeleteSchemaMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
