/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * UI Router API
 * Defines the specification for the UI Catalog API
 * OpenAPI spec version: 1.0.2
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { useAxiosMutator } from '../lib/axiosMutator';
import type { ErrorType } from '../lib/axiosMutator';
import type {
  ErrorResponse,
  I64,
  WorksheetCreatePayload,
  WorksheetCreateResponse,
  WorksheetResponse,
  WorksheetsResponse,
  WorksheetUpdatePayload,
} from './models';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getWorksheets = (
  options?: SecondParameter<typeof useAxiosMutator>,
  signal?: AbortSignal,
) => {
  return useAxiosMutator<WorksheetsResponse>(
    { url: `/ui/worksheets`, method: 'GET', signal },
    options,
  );
};

export const getGetWorksheetsQueryKey = () => {
  return [`/ui/worksheets`] as const;
};

export const getGetWorksheetsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getWorksheets>>>,
  TError = ErrorType<ErrorResponse>,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWorksheets>>, TError, TData>
  >;
  request?: SecondParameter<typeof useAxiosMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetWorksheetsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getWorksheets>>> = ({ signal }) =>
    getWorksheets(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getWorksheets>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetWorksheetsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWorksheets>>
>;
export type GetWorksheetsInfiniteQueryError = ErrorType<ErrorResponse>;

export function useGetWorksheetsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getWorksheets>>>,
  TError = ErrorType<ErrorResponse>,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWorksheets>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorksheets>>,
          TError,
          Awaited<ReturnType<typeof getWorksheets>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetWorksheetsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getWorksheets>>>,
  TError = ErrorType<ErrorResponse>,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWorksheets>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorksheets>>,
          TError,
          Awaited<ReturnType<typeof getWorksheets>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetWorksheetsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getWorksheets>>>,
  TError = ErrorType<ErrorResponse>,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWorksheets>>, TError, TData>
    >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetWorksheetsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getWorksheets>>>,
  TError = ErrorType<ErrorResponse>,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWorksheets>>, TError, TData>
    >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetWorksheetsInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetWorksheetsQueryOptions = <
  TData = Awaited<ReturnType<typeof getWorksheets>>,
  TError = ErrorType<ErrorResponse>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorksheets>>, TError, TData>>;
  request?: SecondParameter<typeof useAxiosMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetWorksheetsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getWorksheets>>> = ({ signal }) =>
    getWorksheets(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getWorksheets>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetWorksheetsQueryResult = NonNullable<Awaited<ReturnType<typeof getWorksheets>>>;
export type GetWorksheetsQueryError = ErrorType<ErrorResponse>;

export function useGetWorksheets<
  TData = Awaited<ReturnType<typeof getWorksheets>>,
  TError = ErrorType<ErrorResponse>,
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorksheets>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorksheets>>,
          TError,
          Awaited<ReturnType<typeof getWorksheets>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetWorksheets<
  TData = Awaited<ReturnType<typeof getWorksheets>>,
  TError = ErrorType<ErrorResponse>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorksheets>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorksheets>>,
          TError,
          Awaited<ReturnType<typeof getWorksheets>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetWorksheets<
  TData = Awaited<ReturnType<typeof getWorksheets>>,
  TError = ErrorType<ErrorResponse>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorksheets>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetWorksheets<
  TData = Awaited<ReturnType<typeof getWorksheets>>,
  TError = ErrorType<ErrorResponse>,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorksheets>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetWorksheetsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createWorksheet = (
  worksheetCreatePayload: WorksheetCreatePayload,
  options?: SecondParameter<typeof useAxiosMutator>,
  signal?: AbortSignal,
) => {
  return useAxiosMutator<WorksheetCreateResponse>(
    {
      url: `/ui/worksheets`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: worksheetCreatePayload,
      signal,
    },
    options,
  );
};

export const getCreateWorksheetMutationOptions = <
  TError = ErrorType<ErrorResponse | void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createWorksheet>>,
    TError,
    { data: WorksheetCreatePayload },
    TContext
  >;
  request?: SecondParameter<typeof useAxiosMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createWorksheet>>,
  TError,
  { data: WorksheetCreatePayload },
  TContext
> => {
  const mutationKey = ['createWorksheet'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createWorksheet>>,
    { data: WorksheetCreatePayload }
  > = (props) => {
    const { data } = props ?? {};

    return createWorksheet(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateWorksheetMutationResult = NonNullable<
  Awaited<ReturnType<typeof createWorksheet>>
>;
export type CreateWorksheetMutationBody = WorksheetCreatePayload;
export type CreateWorksheetMutationError = ErrorType<ErrorResponse | void>;

export const useCreateWorksheet = <TError = ErrorType<ErrorResponse | void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createWorksheet>>,
      TError,
      { data: WorksheetCreatePayload },
      TContext
    >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createWorksheet>>,
  TError,
  { data: WorksheetCreatePayload },
  TContext
> => {
  const mutationOptions = getCreateWorksheetMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getWorksheet = (
  worksheetId: I64,
  options?: SecondParameter<typeof useAxiosMutator>,
  signal?: AbortSignal,
) => {
  return useAxiosMutator<WorksheetResponse>(
    { url: `/ui/worksheets/${worksheetId}`, method: 'GET', signal },
    options,
  );
};

export const getGetWorksheetQueryKey = (worksheetId: I64) => {
  return [`/ui/worksheets/${worksheetId}`] as const;
};

export const getGetWorksheetInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getWorksheet>>>,
  TError = ErrorType<ErrorResponse>,
>(
  worksheetId: I64,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWorksheet>>, TError, TData>
    >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetWorksheetQueryKey(worksheetId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getWorksheet>>> = ({ signal }) =>
    getWorksheet(worksheetId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!worksheetId, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getWorksheet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetWorksheetInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getWorksheet>>>;
export type GetWorksheetInfiniteQueryError = ErrorType<ErrorResponse>;

export function useGetWorksheetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getWorksheet>>>,
  TError = ErrorType<ErrorResponse>,
>(
  worksheetId: I64,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWorksheet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorksheet>>,
          TError,
          Awaited<ReturnType<typeof getWorksheet>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetWorksheetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getWorksheet>>>,
  TError = ErrorType<ErrorResponse>,
>(
  worksheetId: I64,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWorksheet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorksheet>>,
          TError,
          Awaited<ReturnType<typeof getWorksheet>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetWorksheetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getWorksheet>>>,
  TError = ErrorType<ErrorResponse>,
>(
  worksheetId: I64,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWorksheet>>, TError, TData>
    >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetWorksheetInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getWorksheet>>>,
  TError = ErrorType<ErrorResponse>,
>(
  worksheetId: I64,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getWorksheet>>, TError, TData>
    >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetWorksheetInfiniteQueryOptions(worksheetId, options);

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetWorksheetQueryOptions = <
  TData = Awaited<ReturnType<typeof getWorksheet>>,
  TError = ErrorType<ErrorResponse>,
>(
  worksheetId: I64,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorksheet>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetWorksheetQueryKey(worksheetId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getWorksheet>>> = ({ signal }) =>
    getWorksheet(worksheetId, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!worksheetId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getWorksheet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetWorksheetQueryResult = NonNullable<Awaited<ReturnType<typeof getWorksheet>>>;
export type GetWorksheetQueryError = ErrorType<ErrorResponse>;

export function useGetWorksheet<
  TData = Awaited<ReturnType<typeof getWorksheet>>,
  TError = ErrorType<ErrorResponse>,
>(
  worksheetId: I64,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorksheet>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorksheet>>,
          TError,
          Awaited<ReturnType<typeof getWorksheet>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetWorksheet<
  TData = Awaited<ReturnType<typeof getWorksheet>>,
  TError = ErrorType<ErrorResponse>,
>(
  worksheetId: I64,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorksheet>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWorksheet>>,
          TError,
          Awaited<ReturnType<typeof getWorksheet>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetWorksheet<
  TData = Awaited<ReturnType<typeof getWorksheet>>,
  TError = ErrorType<ErrorResponse>,
>(
  worksheetId: I64,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorksheet>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetWorksheet<
  TData = Awaited<ReturnType<typeof getWorksheet>>,
  TError = ErrorType<ErrorResponse>,
>(
  worksheetId: I64,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getWorksheet>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetWorksheetQueryOptions(worksheetId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteWorksheet = (
  worksheetId: I64,
  options?: SecondParameter<typeof useAxiosMutator>,
) => {
  return useAxiosMutator<void>({ url: `/ui/worksheets/${worksheetId}`, method: 'DELETE' }, options);
};

export const getDeleteWorksheetMutationOptions = <
  TError = ErrorType<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteWorksheet>>,
    TError,
    { worksheetId: I64 },
    TContext
  >;
  request?: SecondParameter<typeof useAxiosMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteWorksheet>>,
  TError,
  { worksheetId: I64 },
  TContext
> => {
  const mutationKey = ['deleteWorksheet'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteWorksheet>>,
    { worksheetId: I64 }
  > = (props) => {
    const { worksheetId } = props ?? {};

    return deleteWorksheet(worksheetId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteWorksheetMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteWorksheet>>
>;

export type DeleteWorksheetMutationError = ErrorType<ErrorResponse>;

export const useDeleteWorksheet = <TError = ErrorType<ErrorResponse>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteWorksheet>>,
      TError,
      { worksheetId: I64 },
      TContext
    >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteWorksheet>>,
  TError,
  { worksheetId: I64 },
  TContext
> => {
  const mutationOptions = getDeleteWorksheetMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const updateWorksheet = (
  worksheetId: I64,
  worksheetUpdatePayload: WorksheetUpdatePayload,
  options?: SecondParameter<typeof useAxiosMutator>,
) => {
  return useAxiosMutator<void>(
    {
      url: `/ui/worksheets/${worksheetId}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: worksheetUpdatePayload,
    },
    options,
  );
};

export const getUpdateWorksheetMutationOptions = <
  TError = ErrorType<ErrorResponse>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateWorksheet>>,
    TError,
    { worksheetId: I64; data: WorksheetUpdatePayload },
    TContext
  >;
  request?: SecondParameter<typeof useAxiosMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateWorksheet>>,
  TError,
  { worksheetId: I64; data: WorksheetUpdatePayload },
  TContext
> => {
  const mutationKey = ['updateWorksheet'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateWorksheet>>,
    { worksheetId: I64; data: WorksheetUpdatePayload }
  > = (props) => {
    const { worksheetId, data } = props ?? {};

    return updateWorksheet(worksheetId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateWorksheetMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateWorksheet>>
>;
export type UpdateWorksheetMutationBody = WorksheetUpdatePayload;
export type UpdateWorksheetMutationError = ErrorType<ErrorResponse>;

export const useUpdateWorksheet = <TError = ErrorType<ErrorResponse>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateWorksheet>>,
      TError,
      { worksheetId: I64; data: WorksheetUpdatePayload },
      TContext
    >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateWorksheet>>,
  TError,
  { worksheetId: I64; data: WorksheetUpdatePayload },
  TContext
> => {
  const mutationOptions = getUpdateWorksheetMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
