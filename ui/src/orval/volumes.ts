/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * UI Router API
 * Defines the specification for the UI Catalog API
 * OpenAPI spec version: 1.0.2
 */
import { useInfiniteQuery, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { useAxiosMutator } from '../lib/axiosMutator';
import type { ErrorType } from '../lib/axiosMutator';
import type { ErrorResponse, GetVolumesParams, VolumeResponse, VolumesResponse } from './models';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getVolumes = (
  params?: GetVolumesParams,
  options?: SecondParameter<typeof useAxiosMutator>,
  signal?: AbortSignal,
) => {
  return useAxiosMutator<VolumesResponse>(
    { url: `/ui/volumes`, method: 'GET', params, signal },
    options,
  );
};

export const getGetVolumesQueryKey = (params?: GetVolumesParams) => {
  return [`/ui/volumes`, ...(params ? [params] : [])] as const;
};

export const getGetVolumesInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getVolumes>>>,
  TError = ErrorType<ErrorResponse>,
>(
  params?: GetVolumesParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getVolumes>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetVolumesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getVolumes>>> = ({ signal }) =>
    getVolumes(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getVolumes>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetVolumesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getVolumes>>>;
export type GetVolumesInfiniteQueryError = ErrorType<ErrorResponse>;

export function useGetVolumesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getVolumes>>>,
  TError = ErrorType<ErrorResponse>,
>(
  params: undefined | GetVolumesParams,
  options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getVolumes>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVolumes>>,
          TError,
          Awaited<ReturnType<typeof getVolumes>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetVolumesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getVolumes>>>,
  TError = ErrorType<ErrorResponse>,
>(
  params?: GetVolumesParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getVolumes>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVolumes>>,
          TError,
          Awaited<ReturnType<typeof getVolumes>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetVolumesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getVolumes>>>,
  TError = ErrorType<ErrorResponse>,
>(
  params?: GetVolumesParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getVolumes>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetVolumesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getVolumes>>>,
  TError = ErrorType<ErrorResponse>,
>(
  params?: GetVolumesParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getVolumes>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetVolumesInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetVolumesQueryOptions = <
  TData = Awaited<ReturnType<typeof getVolumes>>,
  TError = ErrorType<ErrorResponse>,
>(
  params?: GetVolumesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getVolumes>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetVolumesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getVolumes>>> = ({ signal }) =>
    getVolumes(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getVolumes>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetVolumesQueryResult = NonNullable<Awaited<ReturnType<typeof getVolumes>>>;
export type GetVolumesQueryError = ErrorType<ErrorResponse>;

export function useGetVolumes<
  TData = Awaited<ReturnType<typeof getVolumes>>,
  TError = ErrorType<ErrorResponse>,
>(
  params: undefined | GetVolumesParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getVolumes>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVolumes>>,
          TError,
          Awaited<ReturnType<typeof getVolumes>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetVolumes<
  TData = Awaited<ReturnType<typeof getVolumes>>,
  TError = ErrorType<ErrorResponse>,
>(
  params?: GetVolumesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getVolumes>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVolumes>>,
          TError,
          Awaited<ReturnType<typeof getVolumes>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetVolumes<
  TData = Awaited<ReturnType<typeof getVolumes>>,
  TError = ErrorType<ErrorResponse>,
>(
  params?: GetVolumesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getVolumes>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetVolumes<
  TData = Awaited<ReturnType<typeof getVolumes>>,
  TError = ErrorType<ErrorResponse>,
>(
  params?: GetVolumesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getVolumes>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetVolumesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getVolume = (
  volumeName: string,
  options?: SecondParameter<typeof useAxiosMutator>,
  signal?: AbortSignal,
) => {
  return useAxiosMutator<VolumeResponse>(
    { url: `/ui/volumes/${volumeName}`, method: 'GET', signal },
    options,
  );
};

export const getGetVolumeQueryKey = (volumeName: string) => {
  return [`/ui/volumes/${volumeName}`] as const;
};

export const getGetVolumeInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getVolume>>>,
  TError = ErrorType<ErrorResponse>,
>(
  volumeName: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getVolume>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetVolumeQueryKey(volumeName);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getVolume>>> = ({ signal }) =>
    getVolume(volumeName, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!volumeName, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getVolume>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetVolumeInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getVolume>>>;
export type GetVolumeInfiniteQueryError = ErrorType<ErrorResponse>;

export function useGetVolumeInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getVolume>>>,
  TError = ErrorType<ErrorResponse>,
>(
  volumeName: string,
  options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getVolume>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVolume>>,
          TError,
          Awaited<ReturnType<typeof getVolume>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetVolumeInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getVolume>>>,
  TError = ErrorType<ErrorResponse>,
>(
  volumeName: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getVolume>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVolume>>,
          TError,
          Awaited<ReturnType<typeof getVolume>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetVolumeInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getVolume>>>,
  TError = ErrorType<ErrorResponse>,
>(
  volumeName: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getVolume>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetVolumeInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getVolume>>>,
  TError = ErrorType<ErrorResponse>,
>(
  volumeName: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getVolume>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetVolumeInfiniteQueryOptions(volumeName, options);

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetVolumeQueryOptions = <
  TData = Awaited<ReturnType<typeof getVolume>>,
  TError = ErrorType<ErrorResponse>,
>(
  volumeName: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getVolume>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetVolumeQueryKey(volumeName);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getVolume>>> = ({ signal }) =>
    getVolume(volumeName, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!volumeName, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getVolume>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetVolumeQueryResult = NonNullable<Awaited<ReturnType<typeof getVolume>>>;
export type GetVolumeQueryError = ErrorType<ErrorResponse>;

export function useGetVolume<
  TData = Awaited<ReturnType<typeof getVolume>>,
  TError = ErrorType<ErrorResponse>,
>(
  volumeName: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getVolume>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVolume>>,
          TError,
          Awaited<ReturnType<typeof getVolume>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetVolume<
  TData = Awaited<ReturnType<typeof getVolume>>,
  TError = ErrorType<ErrorResponse>,
>(
  volumeName: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getVolume>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVolume>>,
          TError,
          Awaited<ReturnType<typeof getVolume>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetVolume<
  TData = Awaited<ReturnType<typeof getVolume>>,
  TError = ErrorType<ErrorResponse>,
>(
  volumeName: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getVolume>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetVolume<
  TData = Awaited<ReturnType<typeof getVolume>>,
  TError = ErrorType<ErrorResponse>,
>(
  volumeName: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getVolume>>, TError, TData>>;
    request?: SecondParameter<typeof useAxiosMutator>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetVolumeQueryOptions(volumeName, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
