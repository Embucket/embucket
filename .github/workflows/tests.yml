name: test
permissions:
  contents: write
on:
  push:
    branches: [main]
    paths:
      - crates/**
      - bin/**
      - Cargo.toml
      - Cargo.lock
      - Dockerfile
      - .github/workflows/**
  pull_request:
    paths:
      - crates/**
      - bin/**
      - Cargo.toml
      - Cargo.lock
      - Dockerfile
      - .github/workflows/**
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
jobs:
  build:
    runs-on:
      group: large-runners
    name: Build Binary
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      
      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      
      - name: Build embucketd binary
        run: cargo build
      
      # Upload the binary as an artifact
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: embucketd-binary
          path: target/debug/embucketd
          retention-days: 1

  unit-tests:
    needs: build
    runs-on:
      group: large-runners
    name: Unit Tests
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      
      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      
      - name: Run unit tests
        run: cargo test --workspace --all-features --all-targets

  sql-logic-tests:
    needs: build
    runs-on:
      group: large-runners
    name: SQL Logic Tests - ${{ matrix.test-dir }}
    strategy:
      matrix:
#        fail-fast: false
        test-dir:
          - 'sql/sql-reference-commands'
          - 'sql/sql-reference-functions'
    env:
      SNOWFLAKE_ACCOUNT: test
      SNOWFLAKE_USER: test
      SNOWFLAKE_PASSWORD: test
      WAREHOUSE: COMPUTE_WH
      DATABASE: embucket
      SCHEMA: public
      RESET_DB: false
      EMBUCKET_ENABLED: true
      EMBUCKET_PROTOCOL: http
      EMBUCKET_HOST: localhost
      EMBUCKET_PORT: 3000
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      # Download the prebuilt binary
      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: embucketd-binary
          path: target/debug/

      # Make the binary executable
      - name: Make binary executable
        run: chmod +x target/debug/embucketd

      - name: Start Embucket Server
        run: |
          target/debug/embucketd &
          echo "Starting Embucket server..."
          sleep 20

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Dependencies
        run: |
          pip install -r test/slt_runner/requirements.txt

      - name: Run SQL Logic Tests
        working-directory: ./test
        run: |
          python -u -m slt_runner --test-dir ${{ matrix.test-dir }}

      - name: Generate Test Results
        working-directory: ./test
        run: |
          mkdir -p test-results
          python -c "
          import json
          import os

          # Path to save the partial results
          results_file = 'test-results/${{ matrix.test-dir }}'.replace('/', '_') + '.json'

          # Create a dict with test results
          results = {
            'test_dir': '${{ matrix.test-dir }}',
            'status': os.environ.get('TEST_STATUS', 'completed')
          }

          # Write results to file
          with open(results_file, 'w') as f:
              json.dump(results, f)
          "

      # Upload partial test results as artifact
      - name: Upload partial test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-dir }}
          path: test/test-results/
          retention-days: 1

  update-readme:
    needs: sql-logic-tests
    if: always() # Run even if some tests fail
    runs-on:
      group: large-runners
    name: Update README with Test Results
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      # Download all test results
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          path: test-results/
          merge-multiple: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Dependencies
        run: |
          pip install -r test/slt_runner/requirements.txt
      
      - name: Update README with Test Results
        working-directory: ./test
        run: |
          python update_readme.py
      
      - name: Commit and Push Changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git fetch origin ${{ github.head_ref }}
          git checkout ${{ github.head_ref }}
          
          # Add the changed files
          git add README.md test/README.md test/assets/
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            # Commit the changes
            git commit -m "Update README with latest test results"
          
            # Pull any remote changes
            git pull --rebase origin ${{ github.head_ref }}
          
            # Push the changes
            git push origin HEAD:${{ github.head_ref }}
          fi