name: test
permissions:
  contents: write
on:
  push:
    branches: [main]
    paths:
      - crates/**
      - bin/**
      - Cargo.toml
      - Cargo.lock
      - Dockerfile
      - .github/workflows/**
  pull_request:
    paths:
      - crates/**
      - bin/**
      - Cargo.toml
      - Cargo.lock
      - Dockerfile
      - .github/workflows/**
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
jobs:
  build:
    runs-on:
      group: large-runners
    name: Build Binary and Tests
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      # Build everything in one go (including tests)
      - name: Build binary and compile tests
        run: cargo test --workspace --all-features --all-targets --no-run

      # Upload the entire target directory as an artifact
      - name: Upload target directory
        uses: actions/upload-artifact@v4
        with:
          name: target-directory
          path: target/
          retention-days: 1

  unit-tests:
    needs: build
    runs-on:
      group: large-runners
    name: Unit Tests
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      # Download the target directory with compiled tests
      - name: Download target directory
        uses: actions/download-artifact@v4
        with:
          name: target-directory
          path: target/

      # Make the test binaries executable
      - name: Make test binaries executable
        run: |
          find target/debug -type f -executable -name "*" -exec chmod +x {} \;

      # Run the already compiled tests
      - name: Run unit tests
        run: cargo test --workspace --all-features --all-targets --no-build

  sql-logic-tests-and-update-readme:
    needs: build
    runs-on:
      group: large-runners
    name: SQL Logic Tests and Update README
    env:
      SNOWFLAKE_ACCOUNT: test
      SNOWFLAKE_USER: test
      SNOWFLAKE_PASSWORD: test
      WAREHOUSE: COMPUTE_WH
      DATABASE: embucket
      SCHEMA: public
      RESET_DB: false
      EMBUCKET_ENABLED: true
      EMBUCKET_PROTOCOL: http
      EMBUCKET_HOST: localhost
      EMBUCKET_PORT: 3000
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      # Download the target directory instead of just the binary
      - name: Download target directory
        uses: actions/download-artifact@v4
        with:
          name: target-directory
          path: target/

      # Make the binary executable
      - name: Make binary executable
        run: chmod +x target/debug/embucketd

      - name: Start Embucket Server
        run: |
          target/debug/embucketd &
          echo "Starting Embucket server..."
          sleep 20

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Dependencies
        run: |
          pip install -r test/slt_runner/requirements.txt

      # Run SQL Logic Tests for all test directories sequentially
      - name: Run SQL Logic Tests - Commands
        working-directory: ./test
        run: |
          python -u -m slt_runner --test-dir sql/sql-reference-commands

      - name: Run SQL Logic Tests - Functions
        working-directory: ./test
        run: |
          python -u -m slt_runner --test-dir sql/sql-reference-functions

      - name: Generate Test Results
        working-directory: ./test
        run: |
          mkdir -p test-results
          python -c "
          import json
          import os

          # Create results for commands
          commands_file = 'test-results/sql_sql-reference-commands.json'
          commands_results = {
            'test_dir': 'sql/sql-reference-commands',
            'status': 'success'
          }
          with open(commands_file, 'w') as f:
            json.dump(commands_results, f)
            
          # Create results for functions
          functions_file = 'test-results/sql_sql-reference-functions.json'
          functions_results = {
            'test_dir': 'sql/sql-reference-functions',
            'status': 'success'
          }
          with open(functions_file, 'w') as f:
            json.dump(functions_results, f)
          "
      - name: Update README with Test Results
        working-directory: ./test
        run: |
          python update_readme.py

          - name: Commit and Push Changes
            run: |
              git config user.name "github-actions[bot]"
              git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
              git fetch origin ${{ github.head_ref }}
              git checkout ${{ github.head_ref }}
              
              # Add the changed files
              git add README.md test/README.md test/assets/
              
              # Check if there are changes to commit
              if git diff --staged --quiet; then
                echo "No changes to commit"
              else
                # Commit the changes
                git commit -m "Update README with latest test results"
              
                # Pull any remote changes
                git pull --rebase origin ${{ github.head_ref }}
              
                # Push the changes
                git push origin HEAD:${{ github.head_ref }}
              fi