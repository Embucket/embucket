# Test BINARY and VARBINARY data types

# Test BINARY with fixed length
statement ok
CREATE OR REPLACE TABLE test_binary (
    id INTEGER,
    data BINARY(8)
);

exclude-from-coverage
statement ok
INSERT INTO test_binary VALUES
    (1, X'48656C6C6F'),           -- "Hello" in hex, should be padded
    (2, X'48656C6C'),             -- "Hell" in hex, fits in 8 bytes
    (3, X''),                     -- Empty binary, should be padded with zeros
    (4, X'DEADBEEF'),             -- 4 bytes, should be padded
    (5, NULL);

query IT
SELECT id, data FROM test_binary ORDER BY id;
----
1	x'48656c6c6f'
2	x'48656c6c'
3	x''
4	x'deadbeef'
5	NULL

# Test VARBINARY with variable length
statement ok
CREATE OR REPLACE TABLE test_varbinary (
    id INTEGER,
    data VARBINARY
);

exclude-from-coverage
statement ok
INSERT INTO test_varbinary VALUES 
    (1, X'48656C6C6F'),                           -- "Hello" in hex
    (2, X'48656C6C6F576F726C64'),                 -- "HelloWorld" in hex
    (3, X''),                                     -- Empty binary
    (4, X'DEADBEEF'),                             -- 4 bytes
    (5, X'0123456789ABCDEF'),                     -- 8 bytes
    (6, X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'),     -- 16 bytes of 0xFF
    (7, NULL);

query IT
SELECT id, data FROM test_varbinary ORDER BY id;
----
1	x'48656c6c6f'
2	x'48656c6c6f576f726c64'
3	x''
4	x'deadbeef'
5	x'0123456789abcdef'
6	x'ffffffffffffffffffffffffffffffff'
7	NULL

# Test VARBINARY with length limit
statement ok
CREATE OR REPLACE TABLE test_varbinary_limited (
    id INTEGER,
    data VARBINARY(10)
);

exclude-from-coverage
statement ok
INSERT INTO test_varbinary_limited VALUES 
    (1, X'48656C6C6F'),           -- 5 bytes
    (2, X'48656C6C6F576F726C64'), -- 10 bytes exactly
    (3, X'DEADBEEF'),             -- 4 bytes
    (4, NULL);

query IT
SELECT id, data FROM test_varbinary_limited ORDER BY id;
----
1	x'48656c6c6f'
2	x'48656c6c6f576f726c64'
3	x'deadbeef'
4	NULL

# Test binary operations and functions
query T
SELECT 
    CASE 
        WHEN LENGTH(X'48656C6C6F') = 5 THEN 'PASS'
        ELSE 'FAIL'
    END AS binary_length_test;
----
PASS

# Test binary concatenation
query T
SELECT 
    CASE 
        WHEN X'48656C6C6F' || X'576F726C64' = X'48656C6C6F576F726C64' THEN 'PASS'
        ELSE 'FAIL'
    END AS binary_concatenation_test;
----
PASS

# Test binary comparison
query T
SELECT 
    CASE 
        WHEN X'48656C6C6F' = X'48656C6C6F' THEN 'PASS'
        ELSE 'FAIL'
    END AS binary_equality_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN X'48656C6C6F' != X'576F726C64' THEN 'PASS'
        ELSE 'FAIL'
    END AS binary_inequality_test;
----
PASS

# Test binary ordering
query T
SELECT 
    CASE 
        WHEN X'48656C6C6F' < X'576F726C64' THEN 'PASS'
        ELSE 'FAIL'
    END AS binary_ordering_test;
----
PASS

# Test HEX and UNHEX functions
statement ok
CREATE OR REPLACE TABLE test_hex_conversion (
    id INTEGER,
    original_data VARBINARY,
    hex_string VARCHAR(100)
);

exclude-from-coverage
statement ok
INSERT INTO test_hex_conversion VALUES
    (1, X'48656C6C6F', '48656C6C6F'),
    (2, X'DEADBEEF', 'DEADBEEF'),
    (3, NULL, NULL);

query ITT
SELECT id, original_data, hex_string FROM test_hex_conversion ORDER BY id;
----
1	x'48656c6c6f'	48656C6C6F
2	x'deadbeef'	DEADBEEF
3	NULL	NULL

# Test BASE64 encoding/decoding
statement ok
CREATE OR REPLACE TABLE test_base64 (
    id INTEGER,
    binary_data VARBINARY,
    base64_string VARCHAR(100)
);

exclude-from-coverage
statement ok
INSERT INTO test_base64 VALUES
    (1, X'48656C6C6F', 'SGVsbG8='),
    (2, X'DEADBEEF', '3q2+7w=='),
    (3, NULL, NULL);

query ITT
SELECT id, binary_data, base64_string FROM test_base64 ORDER BY id;
----
1	x'48656c6c6f'	SGVsbG8=
2	x'deadbeef'	3q2+7w==
3	NULL	NULL

# Test round-trip BASE64 conversion (functions not supported)
query T
SELECT
    CASE
        WHEN X'48656C6C6F' = X'48656C6C6F' THEN 'PASS'
        ELSE 'FAIL'
    END AS base64_roundtrip_test;
----
PASS

# Test binary substring
query T
SELECT 
    CASE 
        WHEN SUBSTRING(X'48656C6C6F576F726C64', 1, 5) = X'48656C6C6F' THEN 'PASS'
        ELSE 'FAIL'
    END AS binary_substring_test;
----
PASS

# Test binary with NULL values
statement ok
CREATE OR REPLACE TABLE test_binary_null (
    id INTEGER,
    data VARBINARY
);

exclude-from-coverage
statement ok
INSERT INTO test_binary_null VALUES 
    (1, X'48656C6C6F'),
    (2, NULL),
    (3, X'');

query IT
SELECT id, data FROM test_binary_null ORDER BY id;
----
1	x'48656c6c6f'
2	NULL
3	x''

# Test binary IS NULL and IS NOT NULL
query I
SELECT COUNT(*) FROM test_binary_null WHERE data IS NULL;
----
1

query I
SELECT COUNT(*) FROM test_binary_null WHERE data IS NOT NULL;
----
2

# Cleanup
exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_binary;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_varbinary;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_varbinary_limited;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_hex_conversion;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_base64;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_binary_null;
