# Test FLOAT, DOUBLE, and REAL data types

# Test FLOAT type with special values
statement ok
CREATE OR REPLACE TABLE test_float (
    id INTEGER,
    f FLOAT
);

exclude-from-coverage
statement ok
INSERT INTO test_float VALUES 
    (1, 123.456),
    (2, -123.456),
    (3, 0.0),
    (4, 1.7976931348623157e+308),  -- Near max double
    (5, -1.7976931348623157e+308), -- Near min double
    (6, 2.2250738585072014e-308),  -- Near min positive double
    (7, 'NaN'::FLOAT),
    (8, 'inf'::FLOAT),
    (9, '-inf'::FLOAT),
    (10, NULL);

query IT
SELECT id, f FROM test_float ORDER BY id;
----
1	123.456
2	-123.456
3	0.0
4	1.7976931348623157e+308
5	-1.7976931348623157e+308
6	2.2250738585072014e-308
7	nan
8	inf
9	-inf
10	NULL

# Test DOUBLE type
statement ok
CREATE OR REPLACE TABLE test_double (
    id INTEGER,
    d DOUBLE
);

exclude-from-coverage
statement ok
INSERT INTO test_double VALUES 
    (1, 123.456789012345),
    (2, -123.456789012345),
    (3, 0.0),
    (4, 'NaN'::DOUBLE),
    (5, 'inf'::DOUBLE),
    (6, '-inf'::DOUBLE),
    (7, NULL);

query IT
SELECT id, d FROM test_double ORDER BY id;
----
1	123.456789012345
2	-123.456789012345
3	0.0
4	nan
5	inf
6	-inf
7	NULL

# Test REAL type
statement ok
CREATE OR REPLACE TABLE test_real (
    id INTEGER,
    r REAL
);

exclude-from-coverage
statement ok
INSERT INTO test_real VALUES 
    (1, 123.456),
    (2, -123.456),
    (3, 0.0),
    (4, 3.4028235e+38),   -- Near max float
    (5, -3.4028235e+38),  -- Near min float
    (6, 1.175494e-38),    -- Near min positive float
    (7, 'NaN'::REAL),
    (8, 'inf'::REAL),
    (9, '-inf'::REAL),
    (10, NULL);

query IT
SELECT id, r FROM test_real ORDER BY id;
----
1	123.456
2	-123.456
3	0.0
4	3.4028235e+38
5	-3.4028235e+38
6	1.175494e-38
7	nan
8	inf
9	-inf
10	NULL

# Test DOUBLE PRECISION alias
statement ok
CREATE OR REPLACE TABLE test_double_precision (
    id INTEGER,
    dp DOUBLE PRECISION
);

exclude-from-coverage
statement ok
INSERT INTO test_double_precision VALUES 
    (1, 123.456789012345),
    (2, -123.456789012345),
    (3, 0.0),
    (4, NULL);

query IT
SELECT id, dp FROM test_double_precision ORDER BY id;
----
1	123.456789012345
2	-123.456789012345
3	0.0
4	NULL

# Test arithmetic operations with floating-point types
query T
SELECT 
    CASE 
        WHEN ABS(123.456 + 67.89 - 191.346) < 0.001 THEN 'PASS'
        ELSE 'FAIL'
    END AS float_addition_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN ABS(1000.0 - 123.456 - 876.544) < 0.001 THEN 'PASS'
        ELSE 'FAIL'
    END AS float_subtraction_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN ABS(12.5 * 8.0 - 100.0) < 0.001 THEN 'PASS'
        ELSE 'FAIL'
    END AS float_multiplication_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN ABS(100.0 / 4.0 - 25.0) < 0.001 THEN 'PASS'
        ELSE 'FAIL'
    END AS float_division_test;
----
PASS

# Test special value comparisons
query T
SELECT 
    CASE 
        WHEN 'NaN'::FLOAT IS NOT NULL THEN 'PASS'
        ELSE 'FAIL'
    END AS nan_not_null_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN 'inf'::FLOAT > 1000000 THEN 'PASS'
        ELSE 'FAIL'
    END AS infinity_comparison_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN '-inf'::FLOAT < -1000000 THEN 'PASS'
        ELSE 'FAIL'
    END AS negative_infinity_comparison_test;
----
PASS

# Test scientific notation
statement ok
CREATE OR REPLACE TABLE test_scientific (
    id INTEGER,
    sci_val FLOAT
);

exclude-from-coverage
statement ok
INSERT INTO test_scientific VALUES 
    (1, 1.23e10),
    (2, -1.23e10),
    (3, 1.23e-10),
    (4, -1.23e-10),
    (5, NULL);

query IT
SELECT id, sci_val FROM test_scientific ORDER BY id;
----
1	12300000000.0
2	-12300000000.0
3	1.23e-10
4	-1.23e-10
5	NULL

# Test precision differences between FLOAT and REAL
statement ok
CREATE OR REPLACE TABLE test_precision (
    id INTEGER,
    float_val FLOAT,
    real_val REAL
);

exclude-from-coverage
statement ok
INSERT INTO test_precision VALUES 
    (1, 123.456789012345678901, 123.456789012345678901),
    (2, NULL, NULL);

query ITT
SELECT id, float_val, real_val FROM test_precision ORDER BY id;
----
1	123.45678901234568	123.45678901234568
2	NULL	NULL

# Cleanup
exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_float;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_double;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_real;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_double_precision;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_scientific;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_precision;
