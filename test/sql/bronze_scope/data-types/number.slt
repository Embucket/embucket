# Test NUMBER data type with various precision and scale combinations

# Test NUMBER(38,0) - maximum precision integer
statement ok
CREATE OR REPLACE TABLE test_number_int (
    id INTEGER,
    big_num NUMBER(38,0)
);

exclude-from-coverage
statement ok
INSERT INTO test_number_int VALUES 
    (1, 12345678901234567890123456789012345678),
    (2, -12345678901234567890123456789012345678),
    (3, 0),
    (4, 1),
    (5, -1),
    (6, NULL);

query IT
SELECT id, big_num FROM test_number_int ORDER BY id;
----
1	12345678901234567890123456789012345678
2	-12345678901234567890123456789012345678
3	0
4	1
5	-1
6	NULL

# Test NUMBER(10,2) - decimal with scale
statement ok
CREATE OR REPLACE TABLE test_number_decimal (
    id INTEGER,
    price NUMBER(10,2)
);

exclude-from-coverage
statement ok
INSERT INTO test_number_decimal VALUES 
    (1, 12345678.99),
    (2, -12345678.99),
    (3, 0.00),
    (4, 0.01),
    (5, -0.01),
    (6, 999.999),  -- Should round to 1000.00
    (7, NULL);

query IT
SELECT id, price FROM test_number_decimal ORDER BY id;
----
1	12345678.99
2	-12345678.99
3	0.00
4	0.01
5	-0.01
6	1000.00
7	NULL

# Test DECIMAL alias
statement ok
CREATE OR REPLACE TABLE test_decimal (
    id INTEGER,
    amount DECIMAL(15,4)
);

exclude-from-coverage
statement ok
INSERT INTO test_decimal VALUES 
    (1, 12345678901.1234),
    (2, -12345678901.1234),
    (3, 0.0001),
    (4, NULL);

query IT
SELECT id, amount FROM test_decimal ORDER BY id;
----
1	12345678901.1234
2	-12345678901.1234
3	0.0001
4	NULL

# Test NUMERIC alias
statement ok
CREATE OR REPLACE TABLE test_numeric (
    id INTEGER,
    value NUMERIC(8,3)
);

exclude-from-coverage
statement ok
INSERT INTO test_numeric VALUES 
    (1, 12345.678),
    (2, -12345.678),
    (3, 0.000),
    (4, NULL);

query IT
SELECT id, value FROM test_numeric ORDER BY id;
----
1	12345.678
2	-12345.678
3	0.000
4	NULL

# Test INT alias
statement ok
CREATE OR REPLACE TABLE test_int (
    id INTEGER,
    count_val INT
);

exclude-from-coverage
statement ok
INSERT INTO test_int VALUES 
    (1, 2147483647),   -- Max 32-bit int
    (2, -2147483648),  -- Min 32-bit int
    (3, 0),
    (4, NULL);

query II
SELECT id, count_val FROM test_int ORDER BY id;
----
1	2147483647
2	-2147483648
3	0
4	NULL

# Test BIGINT alias
statement ok
CREATE OR REPLACE TABLE test_bigint (
    id INTEGER,
    big_count BIGINT
);

exclude-from-coverage
statement ok
INSERT INTO test_bigint VALUES 
    (1, 9223372036854775807),   -- Max 64-bit int
    (2, -9223372036854775808),  -- Min 64-bit int
    (3, 0),
    (4, NULL);

query II
SELECT id, big_count FROM test_bigint ORDER BY id;
----
1	9223372036854775807
2	-9223372036854775808
3	0
4	NULL

# Test SMALLINT alias
statement ok
CREATE OR REPLACE TABLE test_smallint (
    id INTEGER,
    small_count SMALLINT
);

exclude-from-coverage
statement ok
INSERT INTO test_smallint VALUES 
    (1, 32767),   -- Max 16-bit int
    (2, -32768),  -- Min 16-bit int
    (3, 0),
    (4, NULL);

query II
SELECT id, small_count FROM test_smallint ORDER BY id;
----
1	32767
2	-32768
3	0
4	NULL

# Test TINYINT alias
statement ok
CREATE OR REPLACE TABLE test_tinyint (
    id INTEGER,
    tiny_count TINYINT
);

exclude-from-coverage
statement ok
INSERT INTO test_tinyint VALUES 
    (1, 127),   -- Max 8-bit int
    (2, -128),  -- Min 8-bit int
    (3, 0),
    (4, NULL);

query II
SELECT id, tiny_count FROM test_tinyint ORDER BY id;
----
1	127
2	-128
3	0
4	NULL

# Test BYTEINT alias
statement ok
CREATE OR REPLACE TABLE test_byteint (
    id INTEGER,
    byte_count BYTEINT
);

exclude-from-coverage
statement ok
INSERT INTO test_byteint VALUES 
    (1, 127),
    (2, -128),
    (3, 0),
    (4, NULL);

query II
SELECT id, byte_count FROM test_byteint ORDER BY id;
----
1	127
2	-128
3	0
4	NULL

# Test arithmetic operations with NUMBER types
query T
SELECT 
    CASE 
        WHEN 123.45 + 67.89 = 191.34 THEN 'PASS'
        ELSE 'FAIL'
    END AS addition_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN 1000.00 - 123.45 = 876.55 THEN 'PASS'
        ELSE 'FAIL'
    END AS subtraction_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN 12.5 * 8 = 100.0 THEN 'PASS'
        ELSE 'FAIL'
    END AS multiplication_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN 100.0 / 4 = 25.0 THEN 'PASS'
        ELSE 'FAIL'
    END AS division_test;
----
PASS

# Cleanup
exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_number_int;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_number_decimal;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_decimal;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_numeric;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_int;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_bigint;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_smallint;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_tinyint;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_byteint;
