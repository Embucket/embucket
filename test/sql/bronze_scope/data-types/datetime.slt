# Test DATE, TIME, and TIMESTAMP data types

# Test DATE type
statement ok
CREATE OR REPLACE TABLE test_date (
    id INTEGER,
    event_date DATE
);

exclude-from-coverage
statement ok
INSERT INTO test_date VALUES 
    (1, '2023-01-01'),
    (2, '2023-12-31'),
    (3, '1900-01-01'),    -- Early date
    (4, '2099-12-31'),    -- Future date
    (5, '2023-02-28'),    -- Non-leap year
    (6, '2024-02-29'),    -- Leap year
    (7, DATE('2023-06-15')),
    (8, NULL);

query IT
SELECT id, event_date FROM test_date ORDER BY id;
----
1	'2023-01-01'
2	'2023-12-31'
3	'1900-01-01'
4	'2099-12-31'
5	'2023-02-28'
6	'2024-02-29'
7	'2023-06-15'
8	NULL

# Test TIME type with precision
statement ok
CREATE OR REPLACE TABLE test_time (
    id INTEGER,
    event_time TIME(3)
);

exclude-from-coverage
statement ok
INSERT INTO test_time VALUES 
    (1, '12:34:56.789'),
    (2, '00:00:00.000'),
    (3, '23:59:59.999'),
    (4, '12:00:00'),      -- No fractional seconds
    (5, TIME('15:30:45.123')),
    (6, NULL);

query IT
SELECT id, event_time FROM test_time ORDER BY id;
----
1	'12:34:56.789000'
2	'00:00:00'
3	'23:59:59.999000'
4	'12:00:00'
5	'15:30:45.123000'
6	NULL

# Test TIME without precision (default)
statement ok
CREATE OR REPLACE TABLE test_time_default (
    id INTEGER,
    simple_time TIME
);

exclude-from-coverage
statement ok
INSERT INTO test_time_default VALUES 
    (1, '12:34:56'),
    (2, '00:00:00'),
    (3, '23:59:59'),
    (4, NULL);

query IT
SELECT id, simple_time FROM test_time_default ORDER BY id;
----
1	'12:34:56'
2	'00:00:00'
3	'23:59:59'
4	NULL

# Test TIMESTAMP_NTZ (no timezone)
statement ok
CREATE OR REPLACE TABLE test_timestamp_ntz (
    id INTEGER,
    event_timestamp TIMESTAMP_NTZ
);

exclude-from-coverage
statement ok
INSERT INTO test_timestamp_ntz VALUES
    (1, '2023-01-01 12:34:56'),
    (2, '2023-01-01 00:00:00'),
    (3, '2023-12-31 23:59:59'),
    (4, '2023-06-15 15:30:45.123'),
    (5, '2023-06-15 12:30:45'),  -- Removed unsupported function
    (6, NULL);

query IT
SELECT id, event_timestamp FROM test_timestamp_ntz ORDER BY id;
----
1	'2023-01-01T12:34:56'
2	'2023-01-01T00:00:00'
3	'2023-12-31T23:59:59'
4	'2023-06-15T15:30:45.123000'
5	'2023-06-15T12:30:45'
6	NULL

# Test TIMESTAMP_LTZ (local timezone)
statement ok
CREATE OR REPLACE TABLE test_timestamp_ltz (
    id INTEGER,
    event_timestamp TIMESTAMP_LTZ
);

exclude-from-coverage
statement ok
INSERT INTO test_timestamp_ltz VALUES
    (1, '2023-01-01 12:34:56'),
    (2, '2023-06-15 15:30:45.123'),
    (3, '2023-06-15 12:30:45'),  -- Removed unsupported function
    (4, NULL);

query IT
SELECT id, event_timestamp FROM test_timestamp_ltz ORDER BY id;
----
1	'2023-01-01T12:34:56-08:00'
2	'2023-06-15T15:30:45.123000-07:00'
3	'2023-06-15T12:30:45-07:00'
4	NULL

# Test TIMESTAMP_TZ (with timezone)
statement ok
CREATE OR REPLACE TABLE test_timestamp_tz (
    id INTEGER,
    event_timestamp TIMESTAMP_TZ
);

exclude-from-coverage
statement ok
INSERT INTO test_timestamp_tz VALUES
    (1, '2023-01-01 12:34:56 +0000'),
    (2, '2023-01-01 12:34:56 -0800'),
    (3, '2023-06-15 15:30:45.123 +0200'),
    (4, '2023-06-15 15:30:45 -0400'),  -- Simplified timezone format
    (5, NULL);

query IT
SELECT id, event_timestamp FROM test_timestamp_tz ORDER BY id;
----
1	'2023-01-01T12:34:56+00:00'
2	'2023-01-01T12:34:56-08:00'
3	'2023-06-15T15:30:45.123000+02:00'
4	'2023-06-15T15:30:45-04:00'
5	NULL

# Test DATETIME alias
statement ok
CREATE OR REPLACE TABLE test_datetime (
    id INTEGER,
    event_datetime DATETIME
);

exclude-from-coverage
statement ok
INSERT INTO test_datetime VALUES 
    (1, '2023-01-01 12:34:56'),
    (2, '2023-06-15 15:30:45.123'),
    (3, NULL);

query IT
SELECT id, event_datetime FROM test_datetime ORDER BY id;
----
1	'2023-01-01T12:34:56'
2	'2023-06-15T15:30:45.123000'
3	NULL

# Test date/time arithmetic
query T
SELECT 
    CASE 
        WHEN DATE('2023-01-01') + INTERVAL '1 day' = DATE('2023-01-02') THEN 'PASS'
        ELSE 'FAIL'
    END AS date_add_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN DATE('2023-01-02') - INTERVAL '1 day' = DATE('2023-01-01') THEN 'PASS'
        ELSE 'FAIL'
    END AS date_subtract_test;
----
PASS

# Test date/time functions
query T
SELECT 
    CASE 
        WHEN YEAR(DATE('2023-06-15')) = 2023 THEN 'PASS'
        ELSE 'FAIL'
    END AS year_function_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN MONTH(DATE('2023-06-15')) = 6 THEN 'PASS'
        ELSE 'FAIL'
    END AS month_function_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN DAY(DATE('2023-06-15')) = 15 THEN 'PASS'
        ELSE 'FAIL'
    END AS day_function_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN HOUR(TIME('15:30:45')) = 15 THEN 'PASS'
        ELSE 'FAIL'
    END AS hour_function_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN MINUTE(TIME('15:30:45')) = 30 THEN 'PASS'
        ELSE 'FAIL'
    END AS minute_function_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN SECOND(TIME('15:30:45')) = 45 THEN 'PASS'
        ELSE 'FAIL'
    END AS second_function_test;
----
PASS

# Test date/time comparison
query T
SELECT 
    CASE 
        WHEN DATE('2023-01-01') < DATE('2023-01-02') THEN 'PASS'
        ELSE 'FAIL'
    END AS date_comparison_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN TIME('12:00:00') < TIME('13:00:00') THEN 'PASS'
        ELSE 'FAIL'
    END AS time_comparison_test;
----
PASS

# Test CURRENT_DATE, CURRENT_TIME, CURRENT_TIMESTAMP
query T
SELECT 
    CASE 
        WHEN CURRENT_DATE IS NOT NULL THEN 'PASS'
        ELSE 'FAIL'
    END AS current_date_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN CURRENT_TIME IS NOT NULL THEN 'PASS'
        ELSE 'FAIL'
    END AS current_time_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN CURRENT_TIMESTAMP IS NOT NULL THEN 'PASS'
        ELSE 'FAIL'
    END AS current_timestamp_test;
----
PASS

# Test date/time formatting
query T
SELECT 
    CASE 
        WHEN TO_CHAR(DATE('2023-06-15'), 'YYYY-MM-DD') = '2023-06-15' THEN 'PASS'
        ELSE 'FAIL'
    END AS date_format_test;
----
PASS

# Test date/time parsing
query T
SELECT 
    CASE 
        WHEN TO_DATE('2023-06-15', 'YYYY-MM-DD') = DATE('2023-06-15') THEN 'PASS'
        ELSE 'FAIL'
    END AS date_parse_test;
----
PASS

# Cleanup
exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_date;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_time;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_time_default;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_timestamp_ntz;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_timestamp_ltz;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_timestamp_tz;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_datetime;
