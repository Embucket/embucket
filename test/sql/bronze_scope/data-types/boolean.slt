# Test BOOLEAN data type

# Test basic BOOLEAN values
statement ok
CREATE OR REPLACE TABLE test_boolean (
    id INTEGER,
    flag BOOLEAN
);

exclude-from-coverage
statement ok
INSERT INTO test_boolean VALUES 
    (1, TRUE),
    (2, FALSE),
    (3, NULL);

query IT
SELECT id, flag FROM test_boolean ORDER BY id;
----
1	TRUE
2	FALSE
3	NULL

# Test BOOLEAN conversions from strings
statement ok
CREATE OR REPLACE TABLE test_boolean_strings (
    id INTEGER,
    original_string VARCHAR(10),
    bool_value BOOLEAN
);

exclude-from-coverage
statement ok
INSERT INTO test_boolean_strings VALUES 
    (1, 'true', 'true'::BOOLEAN),
    (2, 'false', 'false'::BOOLEAN),
    (3, 'TRUE', 'TRUE'::BOOLEAN),
    (4, 'FALSE', 'FALSE'::BOOLEAN),
    (5, 'yes', 'yes'::BOOLEAN),
    (6, 'no', 'no'::BOOLEAN),
    (7, 'YES', 'YES'::BOOLEAN),
    (8, 'NO', 'NO'::BOOLEAN),
    (9, 'on', 'on'::BOOLEAN),
    (10, 'off', 'off'::BOOLEAN),
    (11, 'ON', 'ON'::BOOLEAN),
    (12, 'OFF', 'OFF'::BOOLEAN);

query ITT
SELECT id, original_string, bool_value FROM test_boolean_strings ORDER BY id;
----
1	true	TRUE
2	false	FALSE
3	TRUE	TRUE
4	FALSE	FALSE
5	yes	TRUE
6	no	FALSE
7	YES	TRUE
8	NO	FALSE
9	on	TRUE
10	off	FALSE
11	ON	TRUE
12	OFF	FALSE

# Test BOOLEAN conversions from numbers
statement ok
CREATE OR REPLACE TABLE test_boolean_numbers (
    id INTEGER,
    original_number INTEGER,
    bool_value BOOLEAN
);

exclude-from-coverage
statement ok
INSERT INTO test_boolean_numbers VALUES 
    (1, 1, 1::BOOLEAN),
    (2, 0, 0::BOOLEAN),
    (3, -1, (-1)::BOOLEAN),
    (4, 42, 42::BOOLEAN),
    (5, NULL, NULL::BOOLEAN);

query ITT
SELECT id, original_number, bool_value FROM test_boolean_numbers ORDER BY id;
----
1	1	TRUE
2	0	FALSE
3	-1	TRUE
4	42	TRUE
5	NULL	NULL

# Test BOOLEAN logical operations
query T
SELECT 
    CASE 
        WHEN TRUE AND TRUE = TRUE THEN 'PASS'
        ELSE 'FAIL'
    END AS and_true_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN TRUE AND FALSE = FALSE THEN 'PASS'
        ELSE 'FAIL'
    END AS and_false_test;
----
PASS

query T
SELECT
    CASE
        WHEN (FALSE AND FALSE) = FALSE THEN 'PASS'
        ELSE 'FAIL'
    END AS and_both_false_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN TRUE OR FALSE = TRUE THEN 'PASS'
        ELSE 'FAIL'
    END AS or_true_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN FALSE OR FALSE = FALSE THEN 'PASS'
        ELSE 'FAIL'
    END AS or_false_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN TRUE OR TRUE = TRUE THEN 'PASS'
        ELSE 'FAIL'
    END AS or_both_true_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN NOT TRUE = FALSE THEN 'PASS'
        ELSE 'FAIL'
    END AS not_true_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN NOT FALSE = TRUE THEN 'PASS'
        ELSE 'FAIL'
    END AS not_false_test;
----
PASS

# Test BOOLEAN with NULL (three-valued logic)
query T
SELECT 
    CASE 
        WHEN (TRUE AND NULL) IS NULL THEN 'PASS'
        ELSE 'FAIL'
    END AS and_null_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN (FALSE AND NULL) = FALSE THEN 'PASS'
        ELSE 'FAIL'
    END AS and_false_null_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN (TRUE OR NULL) = TRUE THEN 'PASS'
        ELSE 'FAIL'
    END AS or_true_null_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN (FALSE OR NULL) IS NULL THEN 'PASS'
        ELSE 'FAIL'
    END AS or_false_null_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN (NOT NULL) IS NULL THEN 'PASS'
        ELSE 'FAIL'
    END AS not_null_test;
----
PASS

# Test BOOLEAN in WHERE clauses
statement ok
CREATE OR REPLACE TABLE test_boolean_where (
    id INTEGER,
    active BOOLEAN,
    name VARCHAR(50)
);

exclude-from-coverage
statement ok
INSERT INTO test_boolean_where VALUES 
    (1, TRUE, 'Active User'),
    (2, FALSE, 'Inactive User'),
    (3, NULL, 'Unknown Status'),
    (4, TRUE, 'Another Active User');

query IT
SELECT id, name FROM test_boolean_where WHERE active = TRUE ORDER BY id;
----
1	Active User
4	Another Active User

query IT
SELECT id, name FROM test_boolean_where WHERE active = FALSE ORDER BY id;
----
2	Inactive User

query IT
SELECT id, name FROM test_boolean_where WHERE active IS NULL ORDER BY id;
----
3	Unknown Status

query IT
SELECT id, name FROM test_boolean_where WHERE active ORDER BY id;
----
1	Active User
4	Another Active User

query IT
SELECT id, name FROM test_boolean_where WHERE NOT active ORDER BY id;
----
2	Inactive User

# Test BOOLEAN in CASE expressions
query TT
SELECT 
    id,
    CASE 
        WHEN active = TRUE THEN 'Active'
        WHEN active = FALSE THEN 'Inactive'
        ELSE 'Unknown'
    END AS status
FROM test_boolean_where 
ORDER BY id;
----
1	Active
2	Inactive
3	Unknown
4	Active

# Test BOOLEAN aggregations
query I
SELECT COUNT(*) FROM test_boolean_where WHERE active = TRUE;
----
2

query I
SELECT COUNT(*) FROM test_boolean_where WHERE active = FALSE;
----
1

query I
SELECT COUNT(*) FROM test_boolean_where WHERE active IS NULL;
----
1

# Test BOOLEAN comparison operators
query T
SELECT 
    CASE 
        WHEN TRUE > FALSE THEN 'PASS'
        ELSE 'FAIL'
    END AS boolean_comparison_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN FALSE < TRUE THEN 'PASS'
        ELSE 'FAIL'
    END AS boolean_comparison_reverse_test;
----
PASS

# Test BOOLEAN with DISTINCT
query T
SELECT DISTINCT active FROM test_boolean_where ORDER BY active;
----
FALSE
TRUE
NULL

# Cleanup
exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_boolean;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_boolean_strings;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_boolean_numbers;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_boolean_where;
