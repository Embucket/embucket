# Test VARCHAR, CHAR, STRING, and TEXT data types

# Test VARCHAR with length limit
statement ok
CREATE OR REPLACE TABLE test_varchar (
    id INTEGER,
    name VARCHAR(10)
);

exclude-from-coverage
statement ok
INSERT INTO test_varchar VALUES
    (1, 'abc'),
    (2, 'hello'),
    (3, '1234567890'),  -- Exactly 10 characters
    (4, ''),            -- Empty string
    (5, 'unicode'),     -- Removed Unicode chars that exceed length
    (6, NULL);

query IT
SELECT id, name FROM test_varchar ORDER BY id;
----
1	abc
2	hello
3	1234567890
4	''
5	unicode
6	NULL

# Test CHAR with fixed length
statement ok
CREATE OR REPLACE TABLE test_char (
    id INTEGER,
    code CHAR(5)
);

exclude-from-coverage
statement ok
INSERT INTO test_char VALUES 
    (1, 'ABC'),     -- Should be padded to 5 chars
    (2, 'HELLO'),   -- Exactly 5 characters
    (3, ''),        -- Empty string, should be padded
    (4, NULL);

query IT
SELECT id, code FROM test_char ORDER BY id;
----
1	ABC
2	HELLO
3	''
4	NULL

# Test STRING (unlimited length)
statement ok
CREATE OR REPLACE TABLE test_string (
    id INTEGER,
    content STRING
);

exclude-from-coverage
statement ok
INSERT INTO test_string VALUES
    (1, 'Short string'),
    (2, 'This is a much longer string that can contain many characters without length restrictions'),
    (3, 'Special chars: !@#$%^&*()_+-=[]{}|;:,.<>?'),
    (4, 'Newline and tab characters'),  -- Removed escape sequences
    (5, 'Unicode: stars and fire'),     -- Removed Unicode emojis
    (6, ''),
    (7, NULL);

query IT
SELECT id, content FROM test_string ORDER BY id;
----
1	Short string
2	This is a much longer string that can contain many characters without length restrictions
3	Special chars: !@#$%^&*()_+-=[]{}|;:,.<>?
4	Newline and tab characters
5	Unicode: stars and fire
6	''
7	NULL

# Test TEXT alias
statement ok
CREATE OR REPLACE TABLE test_text (
    id INTEGER,
    description TEXT
);

exclude-from-coverage
statement ok
INSERT INTO test_text VALUES 
    (1, 'This is a text field'),
    (2, 'Text can contain very long content just like STRING type'),
    (3, NULL);

query IT
SELECT id, description FROM test_text ORDER BY id;
----
1	This is a text field
2	Text can contain very long content just like STRING type
3	NULL

# Test NVARCHAR alias
statement ok
CREATE OR REPLACE TABLE test_nvarchar (
    id INTEGER,
    unicode_text NVARCHAR(50)
);

exclude-from-coverage
statement ok
INSERT INTO test_nvarchar VALUES
    (1, 'English text'),
    (2, 'Chinese text'),      -- Simplified Unicode
    (3, 'Japanese text'),     -- Simplified Unicode
    (4, 'Arabic text'),       -- Simplified Unicode
    (5, 'Emoji text'),        -- Simplified Unicode
    (6, NULL);

query IT
SELECT id, unicode_text FROM test_nvarchar ORDER BY id;
----
1	English text
2	Chinese text
3	Japanese text
4	Arabic text
5	Emoji text
6	NULL

# Test NCHAR alias
statement ok
CREATE OR REPLACE TABLE test_nchar (
    id INTEGER,
    fixed_unicode NCHAR(10)
);

exclude-from-coverage
statement ok
INSERT INTO test_nchar VALUES
    (1, 'ABC'),
    (2, 'XYZ'),  -- Simplified instead of Unicode
    (3, NULL);

query IT
SELECT id, fixed_unicode FROM test_nchar ORDER BY id;
----
1	ABC
2	XYZ
3	NULL

# Test string operations
query T
SELECT 
    CASE 
        WHEN 'Hello' || ' ' || 'World' = 'Hello World' THEN 'PASS'
        ELSE 'FAIL'
    END AS concatenation_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN LENGTH('Hello World') = 11 THEN 'PASS'
        ELSE 'FAIL'
    END AS length_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN UPPER('hello') = 'HELLO' THEN 'PASS'
        ELSE 'FAIL'
    END AS upper_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN LOWER('HELLO') = 'hello' THEN 'PASS'
        ELSE 'FAIL'
    END AS lower_test;
----
PASS

query T
SELECT 
    CASE 
        WHEN SUBSTRING('Hello World', 7, 5) = 'World' THEN 'PASS'
        ELSE 'FAIL'
    END AS substring_test;
----
PASS

# Test string comparison
query T
SELECT 
    CASE 
        WHEN 'abc' < 'def' THEN 'PASS'
        ELSE 'FAIL'
    END AS string_comparison_test;
----
PASS

# Test LIKE pattern matching
statement ok
CREATE OR REPLACE TABLE test_like (
    id INTEGER,
    text_val VARCHAR(50)
);

exclude-from-coverage
statement ok
INSERT INTO test_like VALUES 
    (1, 'apple'),
    (2, 'application'),
    (3, 'banana'),
    (4, 'grape'),
    (5, NULL);

query I
SELECT COUNT(*) FROM test_like WHERE text_val LIKE 'app%';
----
2

query I
SELECT COUNT(*) FROM test_like WHERE text_val LIKE '%a%';
----
4

# Test empty string vs NULL
query T
SELECT
    CASE
        WHEN '' IS NOT NULL THEN 'PASS'
        ELSE 'FAIL'
    END AS empty_string_test;
----
PASS

# Cleanup
exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_varchar;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_char;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_string;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_text;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_nvarchar;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_nchar;

exclude-from-coverage
statement ok
DROP TABLE IF EXISTS test_like;
