exclude-from-coverage
statement ok
CREATE OR REPLACE TABLE music_albums (
  album_ID INTEGER,
  album_name VARCHAR,
  album_year INTEGER,
  band_ID INTEGER
);

exclude-from-coverage
statement ok
INSERT INTO music_albums (album_ID, album_name, album_year, band_ID) VALUES
  (101, 'Escape', 1976, 1),     -- Journey
  (102, 'Abraxas', 1976, 2),    -- Santana
  (103, 'Infinity', 1976, 1);   -- Journey

exclude-from-coverage
statement ok
CREATE OR REPLACE TABLE music_bands (
  band_ID INTEGER,
  band_name VARCHAR
);

exclude-from-coverage
statement ok
INSERT INTO music_bands (band_ID, band_name) VALUES
  (1, 'Journey'),
  (2, 'Santana');

exclude-from-coverage
statement ok
CREATE OR REPLACE TABLE musicians (
  musician_ID INTEGER,
  musician_name VARCHAR
);

exclude-from-coverage
statement ok
INSERT INTO musicians (musician_ID, musician_name) VALUES
  (201, 'Steve Perry'),
  (202, 'Carlos Santana'),
  (203, 'Neal Schon');

exclude-from-coverage
statement ok
CREATE OR REPLACE TABLE musicians_and_albums (
  musician_ID INTEGER,
  album_ID INTEGER
);

exclude-from-coverage
statement ok
INSERT INTO musicians_and_albums (musician_ID, album_ID) VALUES
  (201, 101),  -- Steve Perry -> Escape (Journey)
  (203, 101),  -- Neal Schon  -> Escape (Journey)
  (202, 102),  -- Carlos Santana -> Abraxas (Santana)
  (203, 102);  -- Neal Schon  -> Abraxas (Santana)

query T
with
  albums_1976 as (select * from music_albums where album_year = 1976)
select album_name from albums_1976 order by album_name;
----
Abraxas
Escape
Infinity

query TT
with
   album_info_1976 as (select m.album_ID, m.album_name, b.band_name
      from music_albums as m inner join music_bands as b
      where m.band_id = b.band_id and album_year = 1976),
   Journey_album_info_1976 as (select *
      from album_info_1976 
      where band_name = 'Journey')
select album_name, band_name 
   from Journey_album_info_1976
----
Escape	Journey
Infinity	Journey

query TT
select distinct musicians.musician_id, musician_name
 from musicians inner join musicians_and_albums inner join music_albums inner join music_bands
 where musicians.musician_ID = musicians_and_albums.musician_ID
   and musicians_and_albums.album_ID = music_albums.album_ID
   and music_albums.band_ID = music_bands.band_ID
   and music_bands.band_name = 'Santana'
intersect
select distinct musicians.musician_id, musician_name
 from musicians inner join musicians_and_albums inner join music_albums inner join music_bands
 where musicians.musician_ID = musicians_and_albums.musician_ID
   and musicians_and_albums.album_ID = music_albums.album_ID
   and music_albums.band_ID = music_bands.band_ID
   and music_bands.band_name = 'Journey'
order by musician_ID
----
203	Neal Schon

exclude-from-coverage
statement ok
create or replace view view_musicians_in_bands AS
  select distinct musicians.musician_id, musician_name, band_name
    from musicians inner join musicians_and_albums inner join music_albums inner join music_bands
    where musicians.musician_ID = musicians_and_albums.musician_ID
      and musicians_and_albums.album_ID = music_albums.album_ID
      and music_albums.band_ID = music_bands.band_ID;

query TT
select musician_id, musician_name from view_musicians_in_bands where band_name = 'Santana'
intersect
select musician_id, musician_name from view_musicians_in_bands where band_name = 'Journey'
order by musician_ID
----
203	Neal Schon

query TT
with
  musicians_in_bands as (
     select distinct musicians.musician_id, musician_name, band_name
      from musicians inner join musicians_and_albums inner join music_albums inner join music_bands
      where musicians.musician_ID = musicians_and_albums.musician_ID
        and musicians_and_albums.album_ID = music_albums.album_ID
        and music_albums.band_ID = music_bands.band_ID)
select musician_ID, musician_name from musicians_in_bands where band_name = 'Santana'
intersect
select musician_ID, musician_name from musicians_in_bands where band_name = 'Journey'
order by musician_ID
----
203	Neal Schon

exclude-from-coverage
statement ok
create or replace view view_album_IDs_by_bands AS
 select album_ID, music_bands.band_id, band_name
  from music_albums inner join music_bands
  where music_albums.band_id = music_bands.band_ID;

exclude-from-coverage
statement ok
create or replace view view_musicians_in_bands AS
 select distinct musicians.musician_id, musician_name, band_name
  from musicians inner join musicians_and_albums inner join view_album_IDs_by_bands
  where musicians.musician_ID = musicians_and_albums.musician_ID
    and musicians_and_albums.album_ID = view_album_IDs_by_bands.album_ID;

query TT
with
  album_IDs_by_bands as (select album_ID, music_bands.band_id, band_name
                          from music_albums inner join music_bands
                          where music_albums.band_id = music_bands.band_ID),
  musicians_in_bands as (select distinct musicians.musician_id, musician_name, band_name
                          from musicians inner join musicians_and_albums inner join album_IDs_by_bands
                          where musicians.musician_ID = musicians_and_albums.musician_ID
                            and musicians_and_albums.album_ID = album_IDs_by_bands.album_ID)
select musician_ID, musician_name from musicians_in_bands where band_name = 'Santana'
intersect
select musician_ID, musician_name from musicians_in_bands where band_name = 'Journey'
order by musician_ID
----
203	Neal Schon

query T
WITH RECURSIVE current_f (current_val, previous_val) AS
    (
    SELECT 0, 1
    UNION ALL 
    SELECT current_val + previous_val, current_val FROM current_f
      WHERE current_val + previous_val < 100
    )
  SELECT current_val FROM current_f ORDER BY current_val
----
0
1
1
2
3
5
8
13
21
34
55
89

exclude-from-coverage
statement ok
CREATE OR REPLACE TABLE components (
    description VARCHAR,
    component_ID INTEGER,
    quantity INTEGER,
    parent_component_ID INTEGER
    );

exclude-from-coverage
statement ok
INSERT INTO components (description, quantity, component_ID, parent_component_ID) VALUES
    ('car', 1, 1, 0),
       ('wheel', 4, 11, 1),
          ('tire', 1, 111, 11),
          ('#112 bolt', 5, 112, 11),
          ('brake', 1, 113, 11),
             ('brake pad', 1, 1131, 113),
       ('engine', 1, 12, 1),
          ('piston', 4, 121, 12),
          ('cylinder block', 1, 122, 12),
          ('#112 bolt', 16, 112, 12);

query TTT
WITH RECURSIVE current_layer (indent, layer_ID, parent_component_ID, component_id, description, sort_key) AS (
  SELECT 
      '...', 
      1, 
      parent_component_ID, 
      component_id, 
      description, 
      '0001'
    FROM components WHERE component_id = 1
  UNION ALL
  SELECT indent || '...',
      layer_ID + 1,
      components.parent_component_ID,
      components.component_id, 
      components.description,
      sort_key || SUBSTRING('000' || components.component_ID, -4)
    FROM current_layer JOIN components 
      ON (components.parent_component_id = current_layer.component_id)
  )
SELECT
  indent || description AS description, 
  component_id,
  parent_component_ID
  FROM current_layer
  ORDER BY sort_key
----
...car	1	0
......wheel	11	1
.........tire	111	11
.........#112 bolt	112	11
.........brake	113	11
............brake pad	1131	113
......engine	12	1
.........#112 bolt	112	12
.........piston	121	12
.........cylinder block	122	12

