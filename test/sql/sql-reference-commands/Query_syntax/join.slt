exclude-from-coverage
statement ok
CREATE OR REPLACE TABLE tab1 (col1 INTEGER);

exclude-from-coverage
statement ok
CREATE OR REPLACE TABLE tab2 (col1 INTEGER);

exclude-from-coverage
statement ok
INSERT INTO tab1 VALUES 
   (2),
   (3),
   (4);

exclude-from-coverage
statement ok
INSERT INTO tab2 (col1) VALUES 
   (1),
   (2),
   (2),
   (3);

query TT
SELECT tab1.col1, tab2.col1
    FROM tab1 INNER JOIN tab2
        ON tab2.col1 = tab1.col1
    ORDER BY 1,2
----
2	2
2	2
3	3

query TT
SELECT tab1.col1, tab2.col1
    FROM tab1 LEFT OUTER JOIN tab2
        ON tab2.col1 = tab1.col1
    ORDER BY 1,2
----
2	2
2	2
3	3
4	NULL

query TT
SELECT tab1.col1, tab2.col1
    FROM tab1 RIGHT OUTER JOIN tab2
        ON tab2.col1 = tab1.col1
    ORDER BY 1,2
----
2	2
2	2
3	3
NULL	1

query TT
SELECT tab1.col1, tab2.col1
    FROM tab1 FULL OUTER JOIN tab2
        ON tab2.col1 = tab1.col1
    ORDER BY 1,2
----
2	2
2	2
3	3
4	NULL
NULL	1

query TT
SELECT tab1.col1, tab2.col1
    FROM tab1 CROSS JOIN tab2
    ORDER BY 1, 2
----
2	1
2	2
2	2
2	3
3	1
3	2
3	2
3	3
4	1
4	2
4	2
4	3

query TT
SELECT tab1.col1, tab2.col1
    FROM tab1 CROSS JOIN tab2
    WHERE tab2.col1 = tab1.col1
    ORDER BY 1, 2
----
2	2
2	2
3	3

exclude-from-coverage
statement ok
CREATE OR REPLACE TABLE d1 (
  id number,
  name string
  );

exclude-from-coverage
statement ok
INSERT INTO d1 (id, name) VALUES
  (1,'a'),
  (2,'b'),
  (4,'c');

exclude-from-coverage
statement ok
CREATE OR REPLACE TABLE d2 (
  id number,
  value string
);

exclude-from-coverage
statement ok
INSERT INTO d2 (id, value) VALUES
  (1,'xx'),
  (2,'yy'),
  (5,'zz');

query TTT
SELECT *
    FROM d1 NATURAL INNER JOIN d2
    ORDER BY id;
----
1	a	xx
2	b	yy

query TTT
SELECT *
  FROM d1 NATURAL FULL OUTER JOIN d2
  ORDER BY ID
----
1	a	xx
2	b	yy
4	c	NULL
5	NULL	zz

exclude-from-coverage
statement ok
CREATE OR REPLACE TABLE t3 (col1 INTEGER);

exclude-from-coverage
statement ok
INSERT INTO t3 (col1) VALUES 
   (2),
   (6);

query T
WITH
    l AS (
         SELECT 'a' AS userid
         ),
    r AS (
         SELECT 'b' AS userid
         )
  SELECT *
    FROM l LEFT JOIN r USING(userid)
----
a

query TT
WITH
    l AS (
         SELECT 'a' AS userid
       ),
    r AS (
         SELECT 'b' AS userid
         )
  SELECT l.userid as UI_L,
         r.userid as UI_R
    FROM l LEFT JOIN r USING(userid)
----
a	NULL

# Test selecting from the dummy DUAL table (Oracle compatibility)

query I
SELECT 5 FROM DUAL;
----
5